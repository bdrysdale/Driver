<?xml version="1.0"?>
<doc>
    <assembly>
        <name>com.kaazing.gateway.jms.client.dotnet</name>
    </assembly>
    <members>
        <member name="T:Kaazing.JMS.Stomp.ConnectionClosedException">
            <summary>
            Exception raised when the JMS Connection is restored (either between Gateway and JMS Server or between Client and Gateway).
            </summary>
        </member>
        <member name="T:Kaazing.JMS.Stomp.GenericException">
            <summary>
            Wraps a generic exception inside a JMSException
            </summary>
        </member>
        <member name="T:Kaazing.JMS.JMSException">
             <summary>
            
             <para>This is the root class of all JMS API exceptions.</para>
            
             <para>It provides the following information:
             <list type="bullet">
               <item> A provider-specific string describing the error. This string is 
                    the standard exception message and is available via the
                    getMessage method.</item>
               <item> A provider-specific string error code </item>
               <item> A reference to another exception. Often a JMS API exception will 
                    be the result of a lower-level problem. If appropriate, this 
                    lower-level exception can be linked to the JMS API exception.</item>
             </list></para>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.JMSException.#ctor(System.String,System.String)">
             <summary>
             Constructs a JMSException with the specified reason and 
              error code.
             </summary>
            
              <param name="reason">a description of the exception</param>
              <param name="errorCode">a string specifying the vendor-specific
                                    error code</param>
        </member>
        <member name="M:Kaazing.JMS.JMSException.#ctor(System.String)">
             <summary>
             Constructs a JMSException with the specified reason and with
              the error code defaulting to null.
             </summary>
            
              <param name="reason">a description of the exception</param>
        </member>
        <member name="P:Kaazing.JMS.JMSException.ErrorCode">
            <summary>
            Gets the vendor-specific error code.
            </summary>
             <returns>a string specifying the vendor-specific
                                   error code</returns>
        </member>
        <member name="P:Kaazing.JMS.JMSException.LinkedException">
             <summary>
            
             Gets the exception linked to this one.
             </summary>
            
             <returns>the linked Exception, null if none</returns>
             <summary>
            
             Adds a linked Exception.
             </summary>
            
             <param name="ex">the linked Exception</param>
        </member>
        <member name="M:Kaazing.JMS.Stomp.GenericException.#ctor(System.String)">
             <summary>
             Constructs a GenericException with the specified reason and with
              the error code defaulting to null.
             </summary>
            
              <param name="reason">a description of the exception</param>
        </member>
        <member name="M:Kaazing.JMS.Stomp.GenericException.#ctor(System.String,System.String)">
             <summary>
             Constructs a GenericException with the specified reason and 
              error code.
             </summary>
            
              <param name="reason">a description of the exception</param>
              <param name="errorCode">a string specifying the vendor-specific
                                    error code</param>
        </member>
        <member name="M:Kaazing.JMS.Stomp.GenericException.#ctor(System.Exception)">
             <summary>
             Constructs a GenericException with a generic exception inside.
             </summary>
            
              <param name="e">The Exception to be wrapped</param>
        </member>
        <member name="M:Kaazing.JMS.Stomp.ConnectionClosedException.#ctor(System.String)">
            <summary>
            Exception raised when the JMS Connection is restored between Gateway and JMS Server
            </summary>
            <param name="reason">for the exception</param>
        </member>
        <member name="T:Kaazing.JMS.Stomp.ConnectionDisconnectedException">
            <summary>
            Exception raised when the Gateway closes the client connection, typically due to a fatal error
            </summary>
        </member>
        <member name="M:Kaazing.JMS.Stomp.ConnectionDisconnectedException.#ctor(System.String)">
            <summary>
            Exception raised when the Gateway closes the client connection, typically due to a fatal error
            </summary>
            <param name="reason">for the exception</param>
        </member>
        <member name="T:Kaazing.JMS.Stomp.ConnectionDroppedException">
            <summary>
            Exception raised when the JMS Connection to the server is dropped during operation 
            </summary>
        </member>
        <member name="M:Kaazing.JMS.Stomp.ConnectionDroppedException.#ctor(System.String)">
            <summary>
            Exception raised when the JMS Connection to the server is dropped during operation
            </summary>
            <param name="reason">for the exception</param>
        </member>
        <member name="T:Kaazing.JMS.Stomp.ConnectionFailedException">
            <summary>
            Exception raised when the JMS Connection could not be established with the server
            </summary>
        </member>
        <member name="M:Kaazing.JMS.Stomp.ConnectionFailedException.#ctor(System.String)">
            <summary>
            Exception raised when the JMS Connection could not be established with the server
            </summary>
            <param name="reason">for the exception</param>
        </member>
        <member name="T:Kaazing.JMS.Stomp.ConnectionInterruptedException">
            <summary>
            Exception raised when the JMS Connection is interrupted between Gateway and JMS Server
            </summary>
        </member>
        <member name="M:Kaazing.JMS.Stomp.ConnectionInterruptedException.#ctor(System.String)">
            <summary>
            Exception raised when the JMS Connection is interrupted between Gateway and JMS Server
            </summary>
            <param name="reason">for the exception</param>
        </member>
        <member name="T:Kaazing.JMS.Stomp.ConnectionRestoredException">
            <summary>
            Exception raised when the JMS Connection is restored between Gateway and JMS Server
            </summary>
        </member>
        <member name="M:Kaazing.JMS.Stomp.ConnectionRestoredException.#ctor(System.String)">
            <summary>
            Exception raised when the JMS Connection is restored between Gateway and JMS Server
            </summary>
            <param name="reason">for the exception</param>
        </member>
        <member name="T:Kaazing.JMS.IMessage">
             <summary>
             The Message interface is the root interface of all JMS 
             messages. It defines the message header and the acknowledge 
             method used for all messages.
            
             <para>Most message-oriented middleware (MOM) products treat messages as 
             lightweight entities that consist
             of a header and a payload. The header contains fields used for message
             routing and identification; the payload contains the application data
             being sent.</para>
            
             <para>Within this general form, the definition of a message varies
             significantly across products. It would be quite difficult for the JMS API
             to support all of these message models.</para>
            
             <para>With this in mind, the JMS message model has the following goals:
             <list type="bullet">
               <item>Provide a single, unified message API</item>
               <item>Provide an API suitable for creating messages that match the
                   format used by provider-native messaging applications</item>
               <item>Support the development of heterogeneous applications that span
                   operating systems, machine architectures, and computer languages</item>
               <item>Support messages containing objects
                   ("objects")</item>
               <item>Support messages containing Extensible Markup Language (XML) pages</item>
             </list></para>
            
             <para>JMS messages are composed of the following parts:
             <list type="bullet">
               <item>Header - All messages support the same set of header fields. 
                   Header fields contain values used by both clients and providers to 
                   identify and route messages.</item>
               <item>Properties - Each message contains a built-in facility for supporting
                   application-defined property values. Properties provide an efficient 
                   mechanism for supporting application-defined message filtering.</item>
               <item>Body - The JMS API defines several types of message body, which cover
                   the majority of messaging styles currently in use.</item>
             </list></para>
            
             <H4>Message Bodies</H4>
            
             <para>The JMS API defines five types of message body:
             <list type="bullet">
               <item>Stream - A StreamMessage object's message body contains 
                   a stream of primitive values in the Java programming 
                   language ("Java primitives"). It is filled and read sequentially.</item>
               <item>Map - A MapMessage object's message body contains a set 
                   of name-value pairs, where names are String 
                   objects, and values are Java primitives. The entries can be accessed 
                   sequentially or randomly by name. The order of the entries is 
                   undefined.</item>
               <item>Text - A ITextMessage object's message body contains a 
                   String object. This message type can be used
                   to transport plain-text messages, and XML messages.</item>
               <item>Object - An ObjectMessage object's message body contains 
                   a Serializable object.</item>
               <item>Bytes - A BytesMessage object's message body contains a 
                   stream of uninterpreted bytes. This message type is for 
                   literally encoding a body to match an existing message format. In 
                   many cases, it is possible to use one of the other body types, 
                   which are easier to use. Although the JMS API allows the use of  
                   message properties with byte messages, they are typically not used,
                   since the inclusion of properties may affect the format.</item>
             </list></para>
            
             <H4>Message Headers</H4>
            
             <para>The JMSCorrelationID header field is used for linking one 
             message with
             another. It typically links a reply message with its requesting message.</para>
            
             <para>JMSCorrelationID can hold a provider-specific message ID,
             an application-specific String object, or a provider-native 
             byte[] value.</para>
            
             <H4>Message Properties</H4>
            
             <para>A Message object contains a built-in facility for supporting
             application-defined property values. In effect, this provides a mechanism 
             for adding application-specific header fields to a message.</para>
            
             <para>Properties allow an application, via message selectors, to have a JMS 
             provider select, or filter, messages on its behalf using 
             application-specific criteria.</para>
            
             <para>Property names must obey the rules for a message selector identifier. 
             Property names must not be null, and must not be empty strings. If a property
             name is set and it is either null or an empty string, an 
             ArgumentException must be thrown.</para>
            
             <para>Property values can be boolean, byte, 
             short, int, long, float,
             double, and String.</para>
            
             <para>Property values are set prior to sending a message. When a client 
             receives a message, its properties are in read-only mode. If a 
             client attempts to set properties at this point, a 
             MessageNotWriteableException is thrown. If 
             clearProperties is called, the properties can now be both
             read from and written to. Note that header fields are distinct from 
             properties. Header fields are never in read-only mode. </para>
            
             <para>A property value may duplicate a value in a message's body, or it may 
             not. Although JMS does not define a policy for what should or should not 
             be made a property, application developers should note that JMS providers 
             will likely handle data in a message's body more efficiently than data in 
             a message's properties. For best performance, applications should use
             message properties only when they need to customize a message's header. 
             The primary reason for doing this is to support customized message 
             selection.</para>
            
             <para>Message properties support the following conversion table. The marked 
             cases must be supported. The unmarked cases must throw a 
             JMSException. The String-to-primitive conversions 
             may throw a runtime exception if the
             primitive's valueOf method does not accept the 
             String as a valid representation of the primitive.</para>
            
             <para>A value written as the row type can be read as the column type.</para>
            
             <code>
             |        | boolean byte short int long float double String 
             |----------------------------------------------------------
             |boolean |    X                                       X
             |byte    |          X     X    X   X                  X 
             |short   |                X    X   X                  X 
             |int     |                     X   X                  X 
             |long    |                         X                  X 
             |float   |                               X     X      X 
             |double  |                                     X      X 
             |String  |    X     X     X    X   X     X     X      X 
             |----------------------------------------------------------
             </code>
            
             <para>In addition to the type-specific set/get methods for properties, JMS 
             provides the SetObjectProperty and 
             GetObjectProperty methods. These support the same set of 
             property types using the objectified primitive values. Their purpose is 
             to allow the decision of property type to made at execution time rather 
             than at compile time. They support the same property value conversions.</para>
            
             <para>The SetObjectProperty method accepts values of class 
             Boolean, Byte, Short, 
             Integer, Long, Float, 
             Double, and String. An attempt 
             to use any other class must throw a JMSException.</para>
            
             <para>The getObjectProperty method only returns values of class 
             Boolean, Byte, Short, 
             Integer, Long, Float, 
             Double, and String.</para>
            
             <para>The order of property values is not defined. To iterate through a 
             message's property values, use getPropertyNames to retrieve 
             a property name enumeration and then use the various property get methods 
             to retrieve their values.</para>
            
             <para>A message's properties are deleted by the clearProperties
             method. This leaves the message with an empty set of properties.</para>
            
             <para>Getting a property value for a name which has not been set returns a 
             null value. Only the getStringProperty and 
             getObjectProperty methods can return a null value. 
             Attempting to read a null value as a primitive type must be treated as 
             calling the primitive's corresponding valueOf(String) 
             conversion method with a null value.</para>
            
             <para>The JMS API reserves the JMSX property name prefix for JMS 
             defined properties.
             The full set of these properties is defined in the Java Message Service
             specification. New JMS defined properties may be added in later versions 
             of the JMS API.  Support for these properties is optional. The 
             String[] ConnectionMetaData.getJMSXPropertyNames method 
             returns the names of the JMSX properties supported by a connection.</para>
            
             <para>JMSX properties may be referenced in message selectors whether or not
             they are supported by a connection. If they are not present in a
             message, they are treated like any other absent property.</para>
            
             <para>JMSX properties defined in the specification as "set by provider on 
             send" are available to both the producer and the consumers of the message. 
             JMSX properties defined in the specification as "set by provider on 
             receive" are available only to the consumers.</para>
            
             <para>JMSXGroupID and JMSXGroupSeq are standard 
             properties that clients 
             should use if they want to group messages. All providers must support them.
             Unless specifically noted, the values and semantics of the JMSX properties 
             are undefined.</para>
            
             <para>The JMS API reserves the JMS_<I>vendor_name</I> property 
             name prefix for provider-specific properties. Each provider defines its own 
             value for <I>vendor_name</I>. This is the mechanism a JMS 
             provider uses to make its special per-message services available to a JMS 
             client.</para>
            
             <para>The purpose of provider-specific properties is to provide special 
             features needed to integrate JMS clients with provider-native clients in a 
             single JMS application. They should not be used for messaging between JMS 
             clients.</para>
            
             <H4>Provider Implementations of JMS Message Interfaces</H4>
            
             <para>The JMS API provides a set of message interfaces that define the JMS 
             message 
             model. It does not provide implementations of these interfaces.</para>
            
             <para>Each JMS provider supplies a set of message factories with its 
             Session object for creating instances of messages. This allows 
             a provider to use message implementations tailored to its specific needs.</para>
            
             <para>A provider must be prepared to accept message implementations that are 
             not its own. They may not be handled as efficiently as its own 
             implementation; however, they must be handled.</para>
            
             <para>Note the following exception case when a provider is handling a foreign 
             message implementation. If the foreign message implementation contains a 
             JMSReplyTo header field that is set to a foreign destination 
             implementation, the provider is not required to handle or preserve the 
             value of this header field. </para>
            
             <H4>Message Selectors</H4>
            
             <para>A JMS message selector allows a client to specify, by
             header field references and property references, the
             messages it is interested in. Only messages whose header 
             and property values
             match the 
             selector are delivered. What it means for a message not to be delivered
             depends on the MessageConsumer being used (see 
             {@link Kaazing.JMS.IQueueReceiver QueueReceiver} and 
             {@link Kaazing.JMS.ITopicSubscriber TopicSubscriber}).</para>
            
             <para>Message selectors cannot reference message body values.</para>
            
             <para>A message selector matches a message if the selector evaluates to 
             true when the message's header field values and property values are 
             substituted for their corresponding identifiers in the selector.</para>
            
             <para>A message selector is a String whose syntax is based on a 
             subset of 
             the SQL92 conditional expression syntax. If the value of a message selector 
             is an empty string, the value is treated as a null and indicates that there 
             is no message selector for the message consumer. </para>
            
             <para>The order of evaluation of a message selector is from left to right 
             within precedence level. Parentheses can be used to change this order.</para>
            
             <para>Predefined selector literals and operator names are shown here in 
             uppercase; however, they are case insensitive.</para>
            
             <para>A selector can contain:</para>
            
             <list type="bullet">
               <item>Literals:</item>
               <list type="bullet">
                 <item>A string literal is enclosed in single quotes, with a single quote 
                     represented by doubled single quote; for example, 
                     'literal' and 'literal''s'. Like 
                     string literals, these use the 
                     Unicode character encoding.</item>
                 <item>An exact numeric literal is a numeric value without a decimal 
                     point, such as 57, -957, and  
                     +62; numbers in the range of long are 
                     supported. </item>
                 <item>An approximate numeric literal is a numeric value in scientific 
                     notation, such as 7E3 and -57.9E2, or a 
                     numeric value with a decimal, such as 7., 
                     -95.7, and +6.2; numbers in the range of 
                     double are supported.</item>
                 <item>The boolean literals TRUE and FALSE.</item>
               </list>
               <item>Identifiers:</item>
               <list type="bullet">
                 <item>An identifier is an unlimited-length sequence of letters 
                     and digits, the first of which must be a letter. A letter is any 
                     character for which the method Character.isJavaLetter
                     returns true. This includes '_' and '$'.
                     A letter or digit is any character for which the method 
                     Character.isJavaLetterOrDigit returns true.</item>
                 <item>Identifiers cannot be the names NULL, 
                     TRUE, and FALSE.</item>
                 <item>Identifiers cannot be NOT, AND, 
                     OR, BETWEEN, LIKE, 
                     IN, IS, or ESCAPE.</item>
                 <item>Identifiers are either header field references or property 
                     references.  The type of a property value in a message selector 
                     corresponds to the type used to set the property. If a property 
                     that does not exist in a message is referenced, its value is 
                     NULL.</item>
                 <item>The conversions that apply to the get methods for properties do not
                     apply when a property is used in a message selector expression.
                     For example, suppose you set a property as a string value, as in the
                     following:
                     <code>myMessage.setStringProperty("NumberOfOrders", "2");</code>
                     The following expression in a message selector would evaluate to 
                     false, because a string cannot be used in an arithmetic expression:
                     <code>"NumberOfOrders &gt; 1"</code></item>
                 <item>Identifiers are case-sensitive.</item>
                 <item>Message header field references are restricted to 
                     JMSDeliveryMode, JMSPriority, 
                     JMSMessageID, JMSTimestamp, 
                     JMSCorrelationID, and JMSType. 
                     JMSMessageID, JMSCorrelationID, and 
                     JMSType values may be null and if so are treated as a 
                     NULL value.</item>
                 <item>Any name beginning with 'JMSX' is a JMS defined  
                     property name.</item>
                 <item>Any name beginning with 'JMS_' is a provider-specific 
                     property name.</item>
                 <item>Any name that does not begin with 'JMS' is an 
                     application-specific property name.</item>
               </list>
               <item>White space is the same as that defined for the Java programming
                   language: space, horizontal tab, form feed, and line terminator.</item>
               <item>Expressions: </item>
               <list type="bullet">
                 <item>A selector is a conditional expression; a selector that evaluates 
                     to true matches; a selector that evaluates to 
                     false or unknown does not match.</item>
                 <item>Arithmetic expressions are composed of themselves, arithmetic 
                     operations, identifiers (whose value is treated as a numeric 
                     literal), and numeric literals.</item>
                 <item>Conditional expressions are composed of themselves, comparison 
                     operations, and logical operations.</item>
               </list>
               <item>Standard bracketing () for ordering expression evaluation
                  is supported.</item>
               <item>Logical operators in precedence order: NOT, 
                   AND, OR</item>
               <item>Comparison operators: =, &gt;, &gt;=,
                   &lt;, &lt;=, &lt;&gt; (not equal)</item>
               <list type="bullet">
                 <item>Only like type values can be compared. One exception is that it 
                     is valid to compare exact numeric values and approximate numeric 
                     values; the type conversion required is defined by the rules of 
                     numeric promotion. If the 
                     comparison of non-like type values is attempted, the value of the 
                     operation is false. If either of the type values evaluates to 
                     NULL, the value of the expression is unknown.   </item>
                 <item>String and boolean comparison is restricted to = and 
                     &lt;&gt;. Two strings are equal 
                     if and only if they contain the same sequence of characters.</item>
               </list>
               <item>Arithmetic operators in precedence order:</item>
               <list type="bullet">
                 <item>+, - (unary)</item>
                 <item>*, / (multiplication and division)</item>
                 <item>+, - (addition and subtraction)</item>
                 <item>Arithmetic operations must use numeric promotion in the Java 
                     programming language.</item>
               </list>
               <item>arithmetic-expr1 [NOT] BETWEEN arithmetic-expr2 
                   AND arithmetic-expr3 (comparison operator)</item>
               <list type="bullet">
                 <item>"ageBETWEEN 15 AND 19" is 
                     equivalent to 
                     "age&gt;= 15 AND age &lt;= 19"</item>
                 <item>"ageNOT BETWEEN 15 AND 19" 
                     is equivalent to 
                     "age&lt; 15 OR age &gt; 19"</item>
               </list>
               <item>identifier [NOT] IN (string-literal1, 
                   string-literal2,...) (comparison operator where 
                   identifier has a String or 
                   NULL value)</item>
               <list type="bullet">
                 <item>"CountryIN (' UK', 'US', 'France')"
                     is true for 
                     'UK' and false for 'Peru'; it is 
                     equivalent to the expression 
                     "(Country= ' UK') OR (Country = ' US') OR (Country = ' France')"</item>
                 <item>"CountryNOT IN (' UK', 'US', 'France')" 
                     is false for 'UK' and true for 'Peru'; it 
                     is equivalent to the expression 
                     "NOT((Country = ' UK') OR (Country = ' US') OR (Country = ' France'))"</item>
                 <item>If identifier of an IN or NOT IN 
                     operation is NULL, the value of the operation is 
                     unknown.</item>
               </list>
               <item>identifier [NOT] LIKE pattern-value [ESCAPE 
                   escape-character] (comparison operator, where 
                   identifier has a String value; 
                   pattern-value is a string literal where 
                   '_' stands for any single character; '%' 
                   stands for any sequence of characters, including the empty sequence; 
                   and all other characters stand for themselves. The optional 
                   escape-character is a single-character string 
                   literal whose character is used to escape the special meaning of the 
                   '_' and '%' in 
                   pattern-value.)</item>
               <list type="bullet">
                 <item>"phoneLIKE '12%3'" is true for 
                     '123' or '12993' and false for 
                     '1234'</item>
                 <item>"wordLIKE 'l_se'" is true for 
                     'lose' and false for 'loose'</item>
                 <item>"underscoredLIKE '\_%' ESCAPE '\'"
                      is true for '_foo' and false for 'bar'</item>
                 <item>"phoneNOT LIKE '12%3'" is false for 
                     '123' or '12993' and true for 
                     '1234'</item>
                 <item>If identifier of a LIKE or 
                     NOT LIKE operation is NULL, the value 
                     of the operation is unknown.</item>
               </list>
               <item>identifier IS NULL (comparison operator that tests
                   for a null header field value or a missing property value)</item>
               <list type="bullet">
                 <item>"prop_nameIS NULL"</item>
               </list>
               <item>identifier IS NOT NULL (comparison operator that
                   tests for the existence of a non-null header field value or a property
                   value)</item>
               <list type="bullet">
                 <item>"prop_nameIS NOT NULL"</item>
               </list>
              </list>
             <para>JMS providers are required to verify the syntactic correctness of a 
                message selector at the time it is presented. A method that provides a 
              syntactically incorrect selector must result in a JMSException.
             JMS providers may also optionally provide some semantic checking at the time
             the selector is presented. Not all semantic checking can be performed at
             the time a message selector is presented, because property types are not known.</para>
             
             <para>The following message selector selects messages with a message type 
             of car and color of blue and weight greater than 2500 pounds:</para>
            
             <H4>Null Values</H4>
            
             <para>As noted above, property values may be NULL. The evaluation 
             of selector expressions containing NULL values is defined by 
             SQL92 NULL semantics. A brief description of these semantics 
             is provided here.</para>
            
             <para>SQL treats a NULL value as unknown. Comparison or arithmetic
             with an unknown value always yields an unknown value.</para>
            
             <para>The IS NULL and IS NOT NULL operators convert 
             an unknown value into the respective TRUE and 
             FALSE values.</para>
            
             <para>The boolean operators use three-valued logic as defined by the 
             following tables:</para>
            
             <para><B>The definition of the AND operator</B></para>
            
             <code>
             | AND  |   T   |   F   |   U
             +------+-------+-------+-------
             |  T   |   T   |   F   |   U
             |  F   |   F   |   F   |   F
             |  U   |   U   |   F   |   U
             +------+-------+-------+-------
             </code>
            
             <para><B>The definition of the OR operator</B></para>
            
             <code>
             | OR   |   T   |   F   |   U
             +------+-------+-------+--------
             |  T   |   T   |   T   |   T
             |  F   |   T   |   F   |   U
             |  U   |   T   |   U   |   U
             +------+-------+-------+------- 
             </code> 
            
             <para><B>The definition of the NOT operator</B></para>
            
             <code>
             | NOT
             +------+------
             |  T   |   F
             |  F   |   T
             |  U   |   U
             +------+-------
             </code>
            
             <H4>Special Notes</H4>
            
             <para>When used in a message selector, the JMSDeliveryMode header 
                field is treated as having the values 'PERSISTENT' and 
                'NON_PERSISTENT'.</para>
            
             <para>Date and time values should use the standard long 
                millisecond value. When a date or time literal is included in a message 
                selector, it should be an integer literal for a millisecond value.</para>
            
             <para>Although SQL supports fixed decimal comparison and arithmetic, JMS 
                message selectors do not. This is the reason for restricting exact 
                numeric literals to those without a decimal (and the addition of 
                numerics with a decimal as an alternate representation for 
                approximate numeric values).</para>
            
             <para>SQL comments are not supported.</para>
            
            
             <seealso cref="M:Kaazing.JMS.IMessageConsumer.Receive"/>
             <seealso cref="M:Kaazing.JMS.IMessageConsumer.Receive(System.Int64)"/>
             <seealso cref="M:Kaazing.JMS.IMessageConsumer.ReceiveNoWait"/>
             <seealso cref="M:Kaazing.JMS.IMessageListener.OnMessage(Kaazing.JMS.IMessage)"/>
             <seealso cref="T:Kaazing.JMS.IBytesMessage"/>
             <seealso cref="T:Kaazing.JMS.IMapMessage"/>
             <seealso cref="T:Kaazing.JMS.IObjectMessage"/>
             <seealso cref="T:Kaazing.JMS.IStreamMessage"/>
             <seealso cref="T:Kaazing.JMS.ITextMessage"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.IMessage.ClearProperties">
             <summary>
             Clears a message's properties.
            
             <para>The message's header fields and body are not cleared.</para>
            
             </summary> 
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to clear the message 
                                     properties due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMessage.PropertyExists(System.String)">
             <summary>
             Indicates whether a property value exists.
             </summary> 
            
             <param name="name">the name of the property to test</param>
            
             <returns>true if the property exists</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to determine if the 
                                     property exists due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMessage.GetBooleanProperty(System.String)">
            <summary>
            Returns the value of the boolean property with the  
            specified name.
            </summary> 
             
            <param name="name">the name of the boolean property</param>
             
            <returns>the boolean property value for the specified name</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the property
                                    value due to some internal error.</exception>
            <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid. </exception>
        </member>
        <member name="M:Kaazing.JMS.IMessage.GetByteProperty(System.String)">
            <summary>
            Returns the value of the byte property with the specified 
            name.
            </summary> 
             
            <param name="name">the name of the byte property</param>
             
            <returns>the byte property value for the specified name</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the property
                                    value due to some internal error.</exception>
            <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid. </exception>
        </member>
        <member name="M:Kaazing.JMS.IMessage.GetShortProperty(System.String)">
             <summary>
             Returns the value of the short property with the specified 
             name.
             </summary> 
            
             <param name="name">the name of the short property</param>
            
             <returns>the short property value for the specified name</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the property
                                     value due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMessage.GetIntProperty(System.String)">
            <summary>
            Returns the value of the int property with the specified 
            name.
            </summary> 
             
            <param name="name">the name of the int property</param>
             
            <returns>the int property value for the specified name</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the property
                                    value due to some internal error.</exception>
            <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMessage.GetLongProperty(System.String)">
            <summary>
            Returns the value of the long property with the specified 
            name.
            </summary> 
             
            <param name="name">the name of the long property</param>
             
            <returns>the long property value for the specified name</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the property
                                    value due to some internal error.</exception>
            <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMessage.GetFloatProperty(System.String)">
            <summary>
            Returns the value of the float property with the specified 
            name.
            </summary> 
             
            <param name="name">the name of the float property</param>
             
            <returns>the float property value for the specified name</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the property
                                    value due to some internal error.</exception>
            <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMessage.GetDoubleProperty(System.String)">
            <summary>
            Returns the value of the double property with the specified
            name.
            </summary> 
             
            <param name="name">the name of the double property</param>
             
            <returns>the double property value for the specified name</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the property
                                    value due to some internal error.</exception>
            <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMessage.GetStringProperty(System.String)">
            <summary>
            Returns the value of the String property with the specified
            name.
            </summary> 
             
            <param name="name">the name of the String property</param>
             
            <returns>the String property value for the specified name;
            if there is no property by this name, a null value is returned</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the property
                                    value due to some internal error.</exception>
            <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMessage.GetObjectProperty(System.String)">
            <summary>
            Returns the value of the object property with the specified name.
             
            <para>This method can be used to return, in objectified format,
            an object that has been stored as a property in the message with the 
            equivalent SetObjectProperty method call, or its equivalent
            primitive Set<I>type</I>Property method.</para>
            </summary> 
             
            <param name="name">the name of the object property</param>
             
            <returns>the object property value with the specified name, in 
            objectified format (for example, if the property was set as an 
            int, an Integer is 
            returned); if there is no property by this name, a null value 
            is returned</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the property
                                    value due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMessage.SetBooleanProperty(System.String,System.Boolean)">
             <summary>
             Sets a boolean property value with the specified name into 
             the message.
             </summary> 
            
             <param name="name">the name of the boolean property</param>
             <param name="value">the boolean property value to set</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the property
                                      due to some internal error.</exception>
             <exception cref="T:System.ArgumentException">if the name is null or if the name is
                                      an empty string.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if properties are read-only</exception>
        </member>
        <member name="M:Kaazing.JMS.IMessage.SetByteProperty(System.String,System.SByte)">
            <summary>
            Sets a byte property value with the specified name into 
            the message.
            </summary> 
             
            <param name="name">the name of the byte property</param>
            <param name="value">the byte property value to set</param>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the property
                                     due to some internal error.</exception>
            <exception cref="T:System.ArgumentException">if the name is null or if the name is
                                     an empty string.</exception>
            <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if properties are read-only</exception>
        </member>
        <member name="M:Kaazing.JMS.IMessage.SetShortProperty(System.String,System.Int16)">
            <summary>
            Sets a short property value with the specified name into
            the message.
            </summary> 
             
            <param name="name">the name of the short property</param>
            <param name="value">the short property value to set</param>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the property
                                     due to some internal error.</exception>
            <exception cref="T:System.ArgumentException">if the name is null or if the name is
                                     an empty string.</exception>
            <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if properties are read-only</exception>
        </member>
        <member name="M:Kaazing.JMS.IMessage.SetIntProperty(System.String,System.Int32)">
            <summary>
            Sets an int property value with the specified name into
            the message.
            </summary> 
             
            <param name="name">the name of the int property</param>
            <param name="value">the int property value to set</param>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the property
                                     due to some internal error.</exception>
            <exception cref="T:System.ArgumentException">if the name is null or if the name is
                                     an empty string.</exception>
            <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if properties are read-only</exception>
        </member>
        <member name="M:Kaazing.JMS.IMessage.SetLongProperty(System.String,System.Int64)">
            <summary>
            Sets a long property value with the specified name into 
            the message.
            </summary> 
             
            <param name="name">the name of the long property</param>
            <param name="value">the long property value to set</param>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the property
                                     due to some internal error.</exception>
            <exception cref="T:System.ArgumentException">if the name is null or if the name is
                                     an empty string.</exception>
            <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if properties are read-only</exception>
        </member>
        <member name="M:Kaazing.JMS.IMessage.SetFloatProperty(System.String,System.Single)">
            <summary>
            Sets a float property value with the specified name into 
            the message.
            </summary> 
             
            <param name="name">the name of the float property</param>
            <param name="value">the float property value to set</param>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the property
                                     due to some internal error.</exception>
            <exception cref="T:System.ArgumentException">if the name is null or if the name is
                                     an empty string.</exception>
            <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if properties are read-only</exception>
        </member>
        <member name="M:Kaazing.JMS.IMessage.SetDoubleProperty(System.String,System.Double)">
            <summary>
            Sets a double property value with the specified name into 
            the message.
            </summary> 
             
            <param name="name">the name of the double property</param>
            <param name="value">the double property value to set</param>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the property
                                     due to some internal error.</exception>
            <exception cref="T:System.ArgumentException">if the name is null or if the name is
                                     an empty string.</exception>
            <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if properties are read-only</exception>
        </member>
        <member name="M:Kaazing.JMS.IMessage.SetStringProperty(System.String,System.String)">
             <summary>
             Sets a String property value with the specified name into 
             the message.
             </summary> 
            
             <param name="name">the name of the String property</param>
             <param name="value">the String property value to set</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the property
                                      due to some internal error.</exception>
             <exception cref="T:System.ArgumentException">if the name is null or if the name is
                                      an empty string.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if properties are read-only</exception>
        </member>
        <member name="M:Kaazing.JMS.IMessage.SetObjectProperty(System.String,System.Object)">
            <summary>
            Sets a object property value with the specified name into the 
            message.
             
            <para>Note that this method works only for the objectified primitive
            object types (Integer, Double, 
            Long ...) and String objects.</para>
            </summary> 
             
            <param name="name">the name of the object property</param>
            <param name="value">the object property value to set</param>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the property
                                     due to some internal error.</exception>
            <exception cref="T:System.ArgumentException">if the name is null or if the name is
                                     an empty string.</exception>
            <exception cref="T:Kaazing.JMS.MessageFormatException">if the object is invalid</exception>
            <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if properties are read-only</exception>
        </member>
        <member name="M:Kaazing.JMS.IMessage.Acknowledge">
             <summary>
             Acknowledges all consumed messages of the session of this consumed 
             message.
              
             <para>All consumed JMS messages support the acknowledge 
             method for use when a client has specified that its JMS session's 
             consumed messages are to be explicitly acknowledged.  By invoking 
             acknowledge on a consumed message, a client acknowledges 
             all messages consumed by the session that the message was delivered to.</para>
             
             <para>Calls to acknowledge are ignored for both transacted 
             sessions and sessions specified to use implicit acknowledgement modes.</para>
            
             <para>A client may individually acknowledge each message as it is consumed,
             or it may choose to acknowledge messages as an application-defined group 
             (which is done by calling acknowledge on the last received message of the group,
              thereby acknowledging all messages consumed by the session.)</para>
            
             <para>Messages that have been received but not acknowledged may be 
             redelivered.</para>
            
             </summary> 
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to acknowledge the
                                     messages due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.IllegalStateException">if this method is called on a closed
                                     session.</exception>
            
             <seealso cref="F:Kaazing.JMS.SessionConstants.CLIENT_ACKNOWLEDGE"/>
        </member>
        <member name="M:Kaazing.JMS.IMessage.ClearBody">
             <summary>
             Clears out the message body. Clearing a message's body does not clear 
             its header values or property entries.
            
             <para>If this message body was read-only, calling this method leaves
             the message body in the same state as an empty body in a newly
             created message.</para>
            
             </summary> 
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to clear the message
                                     body due to some internal error.</exception>
        </member>
        <member name="P:Kaazing.JMS.IMessage.JMSMessageID">
             <summary>
             Sets the message ID.
              
             <para>JMS providers set this field when a message is sent. This method
             can be used to change the value for a message that has been received.</para>
            
             </summary> 
             <param name="id">the ID of the message</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the message ID 
                                     due to some internal error.</exception>
            
             <seealso cref="P:Kaazing.JMS.IMessage.JMSMessageID"/>
             <summary>
             <para>Gets the message ID.</para>
            
             <para>The JMSMessageID header field contains a value that 
             uniquely identifies each message sent by a provider.</para>
              
             <para>When a message is sent, JMSMessageID can be ignored. 
             When the send or publish method returns, it 
             contains a provider-assigned value.</para>
            
             <para>A JMSMessageID is a String value that 
             should function as a 
             unique key for identifying messages in a historical repository. 
             The exact scope of uniqueness is provider-defined. It should at 
             least cover all messages for a specific installation of a 
             provider, where an installation is some connected set of message 
             routers.</para>
            
             <para>All JMSMessageID values must start with the prefix 
             'ID:'. 
             Uniqueness of message ID values across different providers is 
             not required.</para>
            
             <para>Since message IDs take some effort to create and increase a
             message's size, some JMS providers may be able to optimize message
             overhead if they are given a hint that the message ID is not used by
             an application. By calling the 
             MessageProducer.setDisableMessageID method, a JMS client 
             enables this potential optimization for all messages sent by that 
             message producer. If the JMS provider accepts this
             hint, these messages must have the message ID set to null; if the 
             provider ignores the hint, the message ID must be set to its normal 
             unique value.</para>
            
             </summary> 
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the message ID 
                                     due to some internal error.</exception>
             <seealso cref="P:Kaazing.JMS.IMessage.JMSMessageID"/>
             <seealso cref="P:Kaazing.JMS.IMessageProducer.DisableMessageID"/>
        </member>
        <member name="P:Kaazing.JMS.IMessage.JMSTimestamp">
             <summary>
             Sets the message timestamp.
              
             <para>JMS providers set this field when a message is sent. This method
             can be used to change the value for a message that has been received.</para>
            
             </summary> 
             <param name="timestamp">the timestamp for this message</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the timestamp
                                     due to some internal error.</exception>
            
             <seealso cref="P:Kaazing.JMS.IMessage.JMSTimestamp"/>
             <summary>
             <para>Gets the message timestamp.</para>
              
             <para>The JMSTimestamp header field contains the time a 
             message was 
             handed off to a provider to be sent. It is not the time the 
             message was actually transmitted, because the actual send may occur 
             later due to transactions or other client-side queueing of messages.</para>
            
             <para>When a message is sent, JMSTimestamp is ignored. When 
             the send or publish
             method returns, it contains a time value somewhere in the interval 
             between the call and the return. The value is in the format of a normal 
             millis time value.</para>
            
             <para>Since timestamps take some effort to create and increase a 
             message's size, some JMS providers may be able to optimize message 
             overhead if they are given a hint that the timestamp is not used by an 
             application. By calling the
             MessageProducer.setDisableMessageTimestamp method, a JMS 
             client enables this potential optimization for all messages sent by 
             that message producer. If the JMS provider accepts this
             hint, these messages must have the timestamp set to zero; if the 
             provider ignores the hint, the timestamp must be set to its normal 
             value.</para>
             </summary> 
            
             <returns>the message timestamp</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the timestamp
                                     due to some internal error.</exception>
            
             <seealso cref="P:Kaazing.JMS.IMessage.JMSTimestamp"/>
             <seealso cref="P:Kaazing.JMS.IMessageProducer.DisableMessageTimestamp"/>
        </member>
        <member name="P:Kaazing.JMS.IMessage.JMSCorrelationIDAsBytes">
             <summary>
             Sets the correlation ID as an array of bytes for the message.
             
             <para>The array is copied before the method returns, so
             future modifications to the array will not alter this message header.</para>
              
             <para>If a provider supports the native concept of correlation ID, a 
             JMS client may need to assign specific JMSCorrelationID 
             values to match those expected by native messaging clients. 
             JMS providers without native correlation ID values are not required to 
             support this method and its corresponding get method;</para>
            
             <para>The use of a byte[] value for 
             JMSCorrelationID is non-portable.</para>
             </summary> 
            
             <param name="correlationID">the correlation ID value as an array of bytes</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the correlation
                                     ID due to some internal error.</exception>
              
             <seealso cref="P:Kaazing.JMS.IMessage.JMSCorrelationID"/>
             <seealso cref="P:Kaazing.JMS.IMessage.JMSCorrelationIDAsBytes"/>
             <summary>
             <para>Gets the correlation ID as an array of bytes for the message.</para>
              
             <para>The use of a byte[] value for 
             JMSCorrelationID is non-portable.</para>
             </summary> 
            
             <returns>the correlation ID of a message as an array of bytes</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the correlation
                                     ID due to some internal error.</exception>
              
             <seealso cref="!:Kaazing.JMS.IMessage.SetJMSCorrelationID(String)"/>
             <seealso cref="P:Kaazing.JMS.IMessage.JMSCorrelationID"/>
             <seealso cref="P:Kaazing.JMS.IMessage.JMSCorrelationIDAsBytes"/>
        </member>
        <member name="P:Kaazing.JMS.IMessage.JMSCorrelationID">
             <summary>
             Sets the correlation ID for the message.
              
             <para>A client can use the JMSCorrelationID header field to 
             link one message with another. A typical use is to link a response 
             message with its request message.</para>
              
             <para>JMSCorrelationID can hold one of the following:
                <list type="bullet">
                  <item>A provider-specific message ID</item>
                  <item>An application-specific String</item>
                  <item>A provider-native byte[] value</item>
                </list></para>
              
             <para>Since each message sent by a JMS provider is assigned a message ID
             value, it is convenient to link messages via message ID. All message ID
             values must start with the 'ID:' prefix.</para>
              
             <para>In some cases, an application (made up of several clients) needs to
             use an application-specific value for linking messages. For instance,
             an application may use JMSCorrelationID to hold a value 
             referencing some external information. Application-specified values 
             must not start with the 'ID:' prefix; this is reserved for 
             provider-generated message ID values.</para>
              
             <para>If a provider supports the native concept of correlation ID, a JMS
             client may need to assign specific JMSCorrelationID values 
             to match those expected by clients that do not use the JMS API. A 
             byte[] value is used for this
             purpose. JMS providers without native correlation ID values are not
             required to support byte[] values. The use of a 
             byte[] value for JMSCorrelationID is 
             non-portable.</para>
             </summary> 
              
             <param name="correlationID">the message ID of a message being referred to</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the correlation
                                     ID due to some internal error.</exception>
              
             <seealso cref="P:Kaazing.JMS.IMessage.JMSCorrelationID"/>
             <seealso cref="P:Kaazing.JMS.IMessage.JMSCorrelationIDAsBytes"/>
             <seealso cref="!:Kaazing.JMS.IMessage.JMSCorrelationIDAsBytes(byte[])"/>
             <summary>
             <para>Gets the correlation ID for the message.</para>
              
             <para>This method is used to return correlation ID values that are 
             either provider-specific message IDs or application-specific 
             String values.</para>
             </summary> 
            
             <returns>the correlation ID of a message as a String</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the correlation
                                     ID due to some internal error.</exception>
            
             <seealso cref="P:Kaazing.JMS.IMessage.JMSCorrelationID"/>
             <seealso cref="P:Kaazing.JMS.IMessage.JMSCorrelationIDAsBytes"/>
             <seealso cref="P:Kaazing.JMS.IMessage.JMSCorrelationIDAsBytes"/>
        </member>
        <member name="P:Kaazing.JMS.IMessage.JMSReplyTo">
             <summary>
             <para>Sets the Destination object to which a reply to this 
             message should be sent.</para>
              
             <para>The JMSReplyTo header field contains the destination 
             where a reply 
             to the current message should be sent. If it is null, no reply is 
             expected. The destination may be either a Queue object or
             a Topic object.</para>
            
             <para>Messages sent with a null JMSReplyTo value may be a 
             notification of some event, or they may just be some data the sender 
             thinks is of interest.</para>
            
             <para>Messages with a JMSReplyTo value typically expect a 
             response. A response is optional; it is up to the client to decide.  
             These messages are called requests. A message sent in response to a 
             request is called a reply.</para>
            
             <para>In some cases a client may wish to match a request it sent earlier 
             with a reply it has just received. The client can use the 
             JMSCorrelationID header field for this purpose.</para>
             </summary> 
            
             <param name="replyTo">Destination to which to send a response to 
                            this message</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the  
                                     JMSReplyTo destination due to some 
                                     internal error.</exception>
            
             <seealso cref="P:Kaazing.JMS.IMessage.JMSReplyTo"/>
        </member>
        <member name="P:Kaazing.JMS.IMessage.JMSDestination">
             <summary>
             Gets the Destination object for this message.
              
             <para>The JMSDestination header field contains the 
             destination to which the message is being sent.</para>
              
             <para>When a message is sent, this field is ignored. After completion
             of the send or publish method, the field 
             holds the destination specified by the method.</para>
              
             <para>When a message is received, its JMSDestination value 
             must be equivalent to the value assigned when it was sent.</para>
             </summary> 
            
             <returns>the destination of this message</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the destination
                                     due to some internal error.</exception>
              
             <seealso cref="P:Kaazing.JMS.IMessage.JMSDestination"/>
             <summary>
             <para>Sets the Destination object for this message.</para>
              
             <para>JMS providers set this field when a message is sent. This method 
             can be used to change the value for a message that has been received.</para>
             </summary> 
            
             <param name="destination">the destination for this message</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the destination
                                     due to some internal error.</exception>
              
             <seealso cref="P:Kaazing.JMS.IMessage.JMSDestination"/>
        </member>
        <member name="P:Kaazing.JMS.IMessage.JMSDeliveryMode">
             <summary>
             Gets the DeliveryMode value specified for this message.
             </summary> 
              
             <returns>the delivery mode for this message</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the 
                                     delivery mode due to some internal error.</exception>
              
             <seealso cref="P:Kaazing.JMS.IMessage.JMSDeliveryMode"/>
             <seealso cref="T:Kaazing.JMS.DeliveryModeConstants"/>
             <summary>
             <para>Sets the DeliveryMode value for this message.</para>
              
             <para>JMS providers set this field when a message is sent. This method 
             can be used to change the value for a message that has been received.</para>
             </summary> 
            
             <param name="deliveryMode">the delivery mode for this message</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the 
                                     delivery mode due to some internal error.</exception>
              
             <seealso cref="P:Kaazing.JMS.IMessage.JMSDeliveryMode"/>
             <seealso cref="T:Kaazing.JMS.DeliveryModeConstants"/>
        </member>
        <member name="P:Kaazing.JMS.IMessage.JMSRedelivered">
             <summary>
             Specifies whether this message is being redelivered.
              
             <para>This field is set at the time the message is delivered. This
             method can be used to change the value for a message that has
             been received.</para>
             </summary> 
            
             <param name="redelivered">an indication of whether this message is being
             redelivered</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the redelivered
                                     state due to some internal error.</exception>
            
             <seealso cref="P:Kaazing.JMS.IMessage.JMSRedelivered"/>
             <summary>
             <para>Gets an indication of whether this message is being redelivered.</para>
            
             <para>If a client receives a message with the JMSRedelivered 
             field set,
             it is likely, but not guaranteed, that this message was delivered
             earlier but that its receipt was not acknowledged
             at that time.</para>
             </summary> 
            
             <returns>true if this message is being redelivered</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the redelivered
                                     state due to some internal error.</exception>
            
             <seealso cref="P:Kaazing.JMS.IMessage.JMSRedelivered"/>
        </member>
        <member name="P:Kaazing.JMS.IMessage.JMSType">
             <summary>
             Sets the message type.
            
             <para>Some JMS providers use a message repository that contains the 
             definitions of messages sent by applications. The JMSType 
             header field may reference a message's definition in the provider's
             repository.</para>
            
             <para>The JMS API does not define a standard message definition repository,
             nor does it define a naming policy for the definitions it contains. </para>
            
             <para>Some messaging systems require that a message type definition for 
             each application message be created and that each message specify its 
             type. In order to work with such JMS providers, JMS clients should 
             assign a value to JMSType, whether the application makes 
             use of it or not. This ensures that the field is properly set for those 
             providers that require it.</para>
            
             <para>To ensure portability, JMS clients should use symbolic values for 
             JMSType that can be configured at installation time to the 
             values defined in the current provider's message repository. If string 
             literals are used, they may not be valid type names for some JMS 
             providers.</para>
             </summary> 
            
             <param name="type">the message type</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the message 
                                     type due to some internal error.</exception>
            
             <seealso cref="P:Kaazing.JMS.IMessage.JMSType"/>
             <summary>
             <para>Gets the message type identifier supplied by the client when the
             message was sent.</para>
             </summary> 
            
             <returns>the message type</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the message 
                                     type due to some internal error.</exception>
            
             <seealso cref="P:Kaazing.JMS.IMessage.JMSType"/>
        </member>
        <member name="P:Kaazing.JMS.IMessage.JMSExpiration">
             <summary>
             Gets the message's expiration value.
              
             <para>When a message is sent, the JMSExpiration header field 
             is left unassigned. After completion of the send or 
             publish method, it holds the expiration time of the
             message. This is the sum of the time-to-live value specified by the
             client and the GMT at the time of the send or 
             publish.</para>
            
             <para>If the time-to-live is specified as zero, JMSExpiration 
             is set to zero to indicate that the message does not expire.</para>
            
             <para>When a message's expiration time is reached, a provider should
             discard it. The JMS API does not define any form of notification of 
             message expiration.</para>
            
             <para>Clients should not receive messages that have expired; however,
             the JMS API does not guarantee that this will not happen.</para>
             </summary> 
            
             <returns>the time the message expires, which is the sum of the
             time-to-live value specified by the client and the GMT at the
             time of the send</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the message 
                                     expiration due to some internal error.</exception>
            
             <seealso cref="P:Kaazing.JMS.IMessage.JMSExpiration"/>
             <summary>
             <para>Sets the message's expiration value.</para>
            
             <para>JMS providers set this field when a message is sent. This method 
             can be used to change the value for a message that has been received.</para>
             </summary> 
              
             <param name="expiration">the message's expiration time</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the message 
                                     expiration due to some internal error.</exception>
            
             <seealso cref="P:Kaazing.JMS.IMessage.JMSExpiration"/>
        </member>
        <member name="P:Kaazing.JMS.IMessage.JMSPriority">
             <summary>
             Gets the message priority level.
              
             <para>The JMS API defines ten levels of priority value, with 0 as the 
             lowest
             priority and 9 as the highest. In addition, clients should consider
             priorities 0-4 as gradations of normal priority and priorities 5-9
             as gradations of expedited priority.</para>
              
             <para>The JMS API does not require that a provider strictly implement 
             priority 
             ordering of messages; however, it should do its best to deliver 
             expedited messages ahead of normal messages.</para>
             </summary> 
              
             <returns>the default message priority</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the message 
                                     priority due to some internal error.</exception>
            
             <seealso cref="P:Kaazing.JMS.IMessage.JMSPriority"/>
             <summary>
             <para>Sets the priority level for this message.</para>
              
             <para>JMS providers set this field when a message is sent. This method 
             can be used to change the value for a message that has been received.</para>
             </summary> 
            
             <param name="priority">the priority of this message</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the message 
                                     priority due to some internal error.</exception>
            
             <seealso cref="P:Kaazing.JMS.IMessage.JMSPriority"/>
        </member>
        <member name="P:Kaazing.JMS.IMessage.PropertyNames">
             <summary>
             Returns an Enumeration of all the property names.
            
             <para>Note that JMS standard header fields are not considered
             properties and are not returned in this enumeration.</para>
             </summary> 
              
             <returns>an enumeration of all the names of property values</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the property
                                      names due to some internal error.</exception>
        </member>
        <member name="T:Kaazing.JMS.IBytesMessage">
             <summary>
             A IBytesMessage object is used to send a message containing a 
             stream of uninterpreted bytes. It inherits from the IMessage 
             interface and adds a bytes
             message body. The receiver of the message supplies the interpretation
             of the bytes.
            
             <para>This message type is for client encoding of existing message formats. 
             If possible, one of the other self-defining message types should be used 
             instead.</para>
            
             <para>Although the JMS API allows the use of message properties with byte 
             messages, they are typically not used, since the inclusion of properties 
             may affect the format.</para>
            
             <para>The primitive types can be written explicitly using methods
             for each type. They may also be written generically as objects.
             For instance, a call to IBytesMessage.WriteInt(6) is
             equivalent to IBytesMessage.WriteObject(new Integer(6)).
             Both forms are provided, because the explicit form is convenient for
             static programming, and the object form is needed when types are not known
             at compile time.</para>
            
             <para>When the message is first created, and when ClearBody
             is called, the body of the message is in write-only mode. After the 
             first call to Reset has been made, the message body is in 
             read-only mode. 
             After a message has been sent, the client that sent it can retain and 
             modify it without affecting the message that has been sent. The same message
             object can be sent multiple times.
             When a message has been received, the provider has called 
             reset so that the message body is in read-only mode for the client.</para>
            
             <para>If ClearBody method is called on a message in read-only mode, 
             the message body is cleared and the message is in write-only mode.</para>
            
             <para>If a client attempts to read a message in write-only mode, a 
             MessageNotReadableException is thrown.</para>
            
             <para>If a client attempts to write a message in read-only mode, a 
             MessageNotWriteableException is thrown.</para>
            
            
             <seealso cref="M:Kaazing.JMS.ISession.CreateBytesMessage"/>
             <seealso cref="T:Kaazing.JMS.IMapMessage"/>
             <seealso cref="T:Kaazing.JMS.IMessage"/>
             <seealso cref="T:Kaazing.JMS.IObjectMessage"/>
             <seealso cref="T:Kaazing.JMS.IStreamMessage"/>
             <seealso cref="T:Kaazing.JMS.ITextMessage"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.ReadBoolean">
             <summary>
             <para>Reads a bool from the bytes message stream.</para>
            
            
             </summary>
             <returns>the bool value read</returns>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message 
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageEOFException">if unexpected end of bytes stream has 
                                            been reached.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.ReadByte">
             <summary>
             <para>Reads a signed 8-bit value from the bytes message stream.</para>
            
            
             </summary>
             <returns>the next byte from the bytes message stream as a signed 8-bit
             byte</returns>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message 
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageEOFException">if unexpected end of bytes stream has 
                                            been reached.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.ReadUnsignedByte">
             <summary>
             <para>Reads an unsigned 8-bit number from the bytes message stream.</para>
              
            
             </summary>
             <returns>the next byte from the bytes message stream, interpreted as an
             unsigned 8-bit number</returns>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message 
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageEOFException">if unexpected end of bytes stream has 
                                            been reached.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.ReadShort">
             <summary>
             <para>Reads a signed 16-bit number from the bytes message stream.</para>
            
            
             </summary>
             <returns>the next two bytes from the bytes message stream, interpreted as
             a signed 16-bit number</returns>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message 
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageEOFException">if unexpected end of bytes stream has 
                                            been reached.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.ReadUnsignedShort">
             <summary>
             <para>Reads an unsigned 16-bit number from the bytes message stream.</para>
              
             </summary>
             <returns>the next two bytes from the bytes message stream, interpreted as
             an unsigned 16-bit integer</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message 
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageEOFException">if unexpected end of bytes stream has 
                                            been reached.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.ReadChar">
             <summary>
             <para>Reads a Unicode character value from the bytes message stream.</para>
            
             </summary>
             <returns>the next two bytes from the bytes message stream as a Unicode
             character</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message 
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageEOFException">if unexpected end of bytes stream has 
                                            been reached.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.ReadInt">
             <summary>
             <para>Reads a signed 32-bit integer from the bytes message stream.</para>
             </summary>
            
             <returns>the next four bytes from the bytes message stream, interpreted
             as an int</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message 
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageEOFException">if unexpected end of bytes stream has 
                                            been reached.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.ReadLong">
             <summary>
             <para>Reads a signed 64-bit integer from the bytes message stream.</para>
            
             </summary>
             <returns>the next eight bytes from the bytes message stream, interpreted
             as a long</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message 
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageEOFException">if unexpected end of bytes stream has 
                                            been reached.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.ReadFloat">
             <summary>
             <para>Reads a float from the bytes message stream.</para>
            
             </summary>
             <returns>the next four bytes from the bytes message stream, interpreted
             as a float</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message 
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageEOFException">if unexpected end of bytes stream has 
                                            been reached.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.ReadDouble">
             <summary>
             <para>Reads a double from the bytes message stream.</para>
            
             </summary>
             <returns>the next eight bytes from the bytes message stream, interpreted
             as a double</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message 
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageEOFException">if unexpected end of bytes stream has 
                                            been reached.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.ReadUTF">
             <summary>
             <para>Reads a string that has been encoded using a modified UTF-8
             format from the bytes message stream.</para>
            
             <para>For more information on the UTF-8 format, see "File System Safe
             UCS Transformation Format (FSS_UTF)", X/Open Preliminary Specification,
             X/Open Company Ltd., Document Number: P316. This information also
             appears in ISO/IEC 10646, Annex P.</para>
            
             </summary>
             <returns>a Unicode string from the bytes message stream</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message 
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageEOFException">if unexpected end of bytes stream has 
                                            been reached.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.ReadBytes(System.Byte[])">
             <summary>
             <para>Reads a byte array from the bytes message stream.</para>
            
             <para>If the length of array value is less than the number of 
             bytes remaining to be read from the stream, the array should 
             be filled. A subsequent call reads the next increment, and so on.</para>
             
             <para>If the number of bytes remaining in the stream is less than the 
             length of 
             array value, the bytes should be read into the array. 
             The return value of the total number of bytes read will be less than
             the length of the array, indicating that there are no more bytes left 
             to be read from the stream. The next read of the stream returns -1.</para>
            
             </summary>
             <param name="value">the buffer into which the data is read</param>
            
             <returns>the total number of bytes read into the buffer, or -1 if 
             there is no more data because the end of the stream has been reached</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message 
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.ReadBytes(System.Byte[],System.Int32)">
             <summary>
             <para>Reads a portion of the bytes message stream.</para>
            
             <para>If the length of array value is less than the number of
             bytes remaining to be read from the stream, the array should 
             be filled. A subsequent call reads the next increment, and so on.</para>
             
             <para>If the number of bytes remaining in the stream is less than the 
             length of 
             array value, the bytes should be read into the array. 
             The return value of the total number of bytes read will be less than
             the length of the array, indicating that there are no more bytes left 
             to be read from the stream. The next read of the stream returns -1.</para>
            
             <para> If length is negative, or
             length is greater than the length of the array
             value, then an IndexOutOfRangeException is
             thrown. No bytes will be read from the stream for this exception case.</para>
              
              
             </summary>
             <param name="value">the buffer into which the data is read</param>
             <param name="length">the number of bytes to read; must be less than or equal to
                    value.length</param>
             
             <returns>the total number of bytes read into the buffer, or -1 if
             there is no more data because the end of the stream has been reached</returns>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message 
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.WriteBoolean(System.Boolean)">
             <summary>
             <para>Writes a bool to the bytes message stream as a 1-byte 
             value.
             The value true is written as the value 
             (byte)1; the value false is written as 
             the value (byte)0.</para>
            
            
             </summary>
             <param name="value">the bool value to be written</param>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.WriteByte(System.Byte)">
             <summary>
             <para>Writes a byte to the bytes message stream as a 1-byte 
             value.</para>
            
            
             </summary>
             <param name="value">the byte value to be written</param>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.WriteShort(System.Int16)">
             <summary>
             <para>Writes a short to the bytes message stream as two bytes,
             high byte first.</para>
            
            
             </summary>
             <param name="value">the short to be written</param>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.WriteChar(System.Char)">
             <summary>
             <para>Writes a char to the bytes message stream as a 2-byte
             value, high byte first.</para>
            
            
             </summary>
             <param name="value">the char value to be written</param>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.WriteInt(System.Int32)">
             <summary>
             <para>Writes an int to the bytes message stream as four bytes, 
             high byte first.</para>
            
             </summary>
             <param name="value">the int to be written</param>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.WriteLong(System.Int64)">
             <summary>
             <para>Writes a long to the bytes message stream as eight bytes, 
             high byte first.</para>
            
            
             </summary>
             <param name="value">the long to be written</param>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.WriteFloat(System.Single)">
             <summary>
             <para>Converts the float argument to an int using 
             the
             floatToIntBits method in class Float,
             and then writes that int value to the bytes message
             stream as a 4-byte quantity, high byte first.</para>
            
            
             </summary>
             <param name="value">the float value to be written</param>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.WriteDouble(System.Double)">
             <summary>
             <para>Converts the double argument to a long using 
             the
             doubleToLongBits method in class Double,
             and then writes that long value to the bytes message
             stream as an 8-byte quantity, high byte first.</para>
            
            
             </summary>
             <param name="value">the double value to be written</param>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.WriteUTF(System.String)">
             <summary>
             <para>Writes a string to the bytes message stream using UTF-8 encoding in a 
             machine-independent manner.</para>
            
             <para>For more information on the UTF-8 format, see "File System Safe 
             UCS Transformation Format (FSS_UTF)", X/Open Preliminary Specification,       
             X/Open Company Ltd., Document Number: P316. This information also 
             appears in ISO/IEC 10646, Annex P. </para>
            
            
             </summary>
             <param name="value">the String value to be written</param>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.WriteBytes(System.Byte[])">
             <summary>
             <para>Writes a byte array to the bytes message stream.</para>
            
            
             </summary>
             <param name="value">the byte array to be written</param>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.WriteBytes(System.Byte[],System.Int32,System.Int32)">
             <summary>
             <para>Writes a portion of a byte array to the bytes message stream.</para>
              
             </summary>
             <param name="value">the byte array value to be written</param>
             <param name="offset">the initial offset within the byte array</param>
             <param name="length">the number of bytes to use</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.WriteObject(System.Object)">
             <summary>
             <para>Writes an object to the bytes message stream.</para>
            
             <para>This method works only for the objectified primitive
             object types (Integer, Double, 
             Long...), String objects, and byte 
             arrays.</para>
            
             </summary>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if the object is of an invalid type.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IBytesMessage.Reset">
            <summary>
            <para>Puts the message body in read-only mode and repositions the stream of 
            bytes to the beginning.</para>
             
            </summary>
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to reset the message
                                    due to some internal error.</exception>
            <exception cref="T:Kaazing.JMS.MessageFormatException">if the message has an invalid
                                    format.</exception>
        </member>
        <member name="P:Kaazing.JMS.IBytesMessage.BodyLength">
            <summary>
            Gets the number of bytes of the message body when the message
            is in read-only mode. The value returned can be used to allocate 
            a byte array. The value returned is the entire length of the message
             body, regardless of where the pointer for reading the message 
            is currently located.
            
            </summary>
            <returns>number of bytes in the message</returns>
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message 
                                    due to some internal error.</exception>
            <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only
                                    mode.</exception>
        </member>
        <member name="T:Kaazing.JMS.IExceptionListener">
             <summary>
             If a JMS provider detects a serious problem with a Connection
             object, it informs the Connection object's 
             ExceptionListener, if one has been registered. 
             It does this by calling the listener's onException method, 
             passing it a JMSException argument describing the problem.
            
             <para>An exception listener allows a client to be notified of a problem 
             asynchronously. Some connections only consume messages, so they would have no
             other way to learn that their connection has failed.</para>
            
             <para>A JMS provider should attempt to resolve connection problems 
             itself before it notifies the client of them.</para>
            
            
             <seealso cref="P:Kaazing.JMS.IConnection.ExceptionListener"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.IExceptionListener.OnException(Kaazing.JMS.JMSException)">
             <summary>
             Notifies user of a JMS exception.
            
             </summary>
             <param name="exception">the JMS exception</param>
        </member>
        <member name="T:Kaazing.JMS.IConnectionMetaData">
             <summary>
             A ConnectionMetaData object provides information describing the 
             Connection object.
            
             </summary>
        </member>
        <member name="P:Kaazing.JMS.IConnectionMetaData.JMSVersion">
             <summary>
             Gets the JMS API version.
             </summary>
            
             <returns>the JMS API version</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to retrieve the
                                     metadata due to some internal error.</exception>
        </member>
        <member name="P:Kaazing.JMS.IConnectionMetaData.JMSMajorVersion">
            <summary>
            Gets the JMS major version number.
            </summary>
             
            <returns>the JMS API major version number</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to retrieve the
                                    metadata due to some internal error.</exception>
        </member>
        <member name="P:Kaazing.JMS.IConnectionMetaData.JMSMinorVersion">
            <summary>
            Gets the JMS minor version number.
            </summary>
             
            <returns>the JMS API minor version number</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to retrieve the
                                    metadata due to some internal error.</exception>
        </member>
        <member name="P:Kaazing.JMS.IConnectionMetaData.JMSProviderName">
             <summary>
             Gets the JMS provider name.
             </summary>
            
             <returns>the JMS provider name</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to retrieve the
                                     metadata due to some internal error.</exception>
        </member>
        <member name="P:Kaazing.JMS.IConnectionMetaData.ProviderVersion">
             <summary>
             Gets the JMS provider version.
             </summary>
            
             <returns>the JMS provider version</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to retrieve the
                                     metadata due to some internal error.</exception>
        </member>
        <member name="P:Kaazing.JMS.IConnectionMetaData.ProviderMajorVersion">
            <summary>
            Gets the JMS provider major version number.
            </summary>
             
            <returns>the JMS provider major version number</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to retrieve the
                                    metadata due to some internal error.</exception>
        </member>
        <member name="P:Kaazing.JMS.IConnectionMetaData.ProviderMinorVersion">
            <summary>
            Gets the JMS provider minor version number.
            </summary>
             
            <returns>the JMS provider minor version number</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to retrieve the
                                    metadata due to some internal error.</exception>
        </member>
        <member name="P:Kaazing.JMS.IConnectionMetaData.JMSXPropertyNames">
            <summary>
            Gets an enumeration of the JMSX property names.
            </summary>
             
            <returns>an Enumeration of JMSX property names</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to retrieve the
                                    metadata due to some internal error.</exception>
        </member>
        <member name="T:Kaazing.JMS.IDestination">
             <summary>
             A IDestination object encapsulates a provider-specific 
             address.
             The JMS API does not define a standard address syntax. Although a standard
             address syntax was considered, it was decided that the differences in 
             address semantics between existing message-oriented middleware (MOM) 
             products were too wide to bridge with a single syntax. 
            
             <para>Since IDestination is an administered object, it may 
             contain 
             provider-specific configuration information in addition to its address.</para>
            
             <para>The JMS API also supports a client's use of provider-specific address 
             names.</para>
            
             <para>IDestination objects support concurrent use.</para>
            
             <para>A IDestination object is a JMS administered object.</para>
            
             <para>JMS administered objects are objects containing configuration 
             information that are created by an administrator and later used by 
             JMS clients. They make it practical to administer the JMS API in the 
             enterprise.</para>
            
             <seealso cref="T:Kaazing.JMS.IQueue"/>
             <seealso cref="T:Kaazing.JMS.ITopic"/>
             </summary>
        </member>
        <member name="T:Kaazing.JMS.IMapMessage">
             <summary>
             A IMapMessage object is used to send a set of name-value pairs.
             The names are String objects, and the values are primitive 
             data types. The names must have a value that
             is not null, and not an empty string. The entries can be accessed 
             sequentially or randomly by name. The order of the entries is undefined. 
             IMapMessage inherits from the Message interface
             and adds a message body that contains a Map.
            
             <para>The primitive types can be read or written explicitly using methods
             for each type. They may also be read or written generically as objects.
             For instance, a call to IMapMessage.setInt("foo", 6) is 
             equivalent to IMapMessage.setObject("foo", new Integer(6)).
             Both forms are provided, because the explicit form is convenient for
             static programming, and the object form is needed when types are not known
             at compile time.</para>
            
             <para>When a client receives a IMapMessage, it is in read-only 
             mode. If a client attempts to write to the message at this point, a 
             MessageNotWriteableException is thrown. If 
             clearBody is called, the message can now be both read from and 
             written to.</para>
            
             <para>IMapMessage objects support the following conversion table. 
             The marked cases must be supported. The unmarked cases must throw a 
             JMSException. The String-to-primitive conversions 
             may throw a runtime exception if the primitive's valueOf() 
             method does not accept it as a valid String representation of 
             the primitive.</para>
            
             <para>A value written as the row type can be read as the column type.</para>
            
             <code>
             |        | boolean byte short char int long float double String byte[]
             |----------------------------------------------------------------------
             |boolean |    X                                            X
             |byte    |          X     X         X   X                  X
             |short   |                X         X   X                  X
             |char    |                     X                           X
             |int     |                          X   X                  X
             |long    |                              X                  X
             |float   |                                    X     X      X
             |double  |                                          X      X
             |String  |    X     X     X         X   X     X     X      X
             |byte[]  |                                                        X
             |----------------------------------------------------------------------
             </code>
            
             <para>Attempting to read a null value as a primitive type must be treated
             as calling the primitive's corresponding valueOf(String) 
             conversion method with a null value. Since char does not 
             support a String conversion, attempting to read a null value 
             as a char must throw a ArgumentException.</para>
            
            
             <seealso cref="!:Kaazing.JMS.ISession.CreateIMapMessage"/>
             <seealso cref="T:Kaazing.JMS.IBytesMessage"/>
             <seealso cref="T:Kaazing.JMS.IMessage"/>
             <seealso cref="T:Kaazing.JMS.IObjectMessage"/>
             <seealso cref="T:Kaazing.JMS.IStreamMessage"/>
             <seealso cref="T:Kaazing.JMS.ITextMessage"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.GetBoolean(System.String)">
             <summary>
             Returns the boolean value with the specified name.
             </summary>
            
             <param name="name">the name of the boolean</param>
            
             <returns>the boolean value with the specified name</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.GetByte(System.String)">
             <summary>
             Returns the byte value with the specified name.
             </summary> 
            
             <param name="name">the name of the byte</param>
            
             <returns>the byte value with the specified name</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.GetShort(System.String)">
             <summary>
             Returns the short value with the specified name.
             </summary> 
            
             <param name="name">the name of the short</param>
            
             <returns>the short value with the specified name</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid. </exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.GetChar(System.String)">
             <summary>
             Returns the Unicode character value with the specified name.
             </summary> 
            
             <param name="name">the name of the Unicode character</param>
            
             <returns>the Unicode character value with the specified name</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.GetInt(System.String)">
             <summary>
             Returns the int value with the specified name.
             </summary> 
            
             <param name="name">the name of the int</param>
            
             <returns>the int value with the specified name</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.GetLong(System.String)">
             <summary>
             Returns the long value with the specified name.
             </summary> 
            
             <param name="name">the name of the long</param>
            
             <returns>the long value with the specified name</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.GetFloat(System.String)">
             <summary>
             Returns the float value with the specified name.
             </summary> 
            
             <param name="name">the name of the float</param>
            
             <returns>the float value with the specified name</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.GetDouble(System.String)">
             <summary>
             Returns the double value with the specified name.
             </summary> 
            
             <param name="name">the name of the double</param>
            
             <returns>the double value with the specified name</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.GetString(System.String)">
             <summary>
             Returns the String value with the specified name.
             </summary> 
            
             <param name="name">the name of the String</param>
            
             <returns>the String value with the specified name; if there 
             is no item by this name, a null value is returned</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.GetBytes(System.String)">
             <summary>
             Returns the byte array value with the specified name.
             </summary> 
            
             <param name="name">the name of the byte array</param>
            
             <returns>a copy of the byte array value with the specified name; if there
             is no
             item by this name, a null value is returned.</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid. </exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.GetObject(System.String)">
             <summary>
             Returns the value of the object with the specified name.
            
             <para>This method can be used to return, in objectified format,
             an object  that had 
             been stored in the Map with the equivalent
             setObject method call, or its equivalent primitive
             set<I>type</I> method.</para>
            
             <para>Note that byte values are returned as byte[], not 
             Byte[].</para>
             </summary> 
            
             <param name="name">the name of the object</param>
            
             <returns>a copy of the object value with the specified name, in 
             objectified format (for example, if the object was set as an 
             int, an Integer is returned); if there is no 
             item by this name, a null value is returned</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.SetBoolean(System.String,System.Boolean)">
             <summary>
             Sets a boolean value with the specified name into the Map.
             </summary>
            
             <param name="name">the name of the boolean</param>
             <param name="value">the boolean value to set in the Map</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:System.ArgumentException">if the name is null or if the name is
                                      an empty string.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.SetByte(System.String,System.Byte)">
             <summary>
             Sets a byte value with the specified name into the Map.
             </summary> 
            
             <param name="name">the name of the byte</param>
             <param name="value">the byte value to set in the Map</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:System.ArgumentException">if the name is null or if the name is
                                      an empty string.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.SetShort(System.String,System.Int16)">
             <summary>
             Sets a short value with the specified name into the Map.
             </summary> 
            
             <param name="name">the name of the short</param>
             <param name="value">the short value to set in the Map</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:System.ArgumentException">if the name is null or if the name is
                                      an empty string.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.SetChar(System.String,System.Char)">
             <summary>
             Sets a Unicode character value with the specified name into the Map.
             </summary> 
            
             <param name="name">the name of the Unicode character</param>
             <param name="value">the Unicode character value to set in the Map</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:System.ArgumentException">if the name is null or if the name is
                                      an empty string.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.SetInt(System.String,System.Int32)">
             <summary>
             Sets an int value with the specified name into the Map.
             </summary> 
            
             <param name="name">the name of the int</param>
             <param name="value">the int value to set in the Map</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:System.ArgumentException">if the name is null or if the name is
                                      an empty string.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.SetLong(System.String,System.Int64)">
             <summary>
             Sets a long value with the specified name into the Map.
             </summary> 
            
             <param name="name">the name of the long</param>
             <param name="value">the long value to set in the Map</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:System.ArgumentException">if the name is null or if the name is
                                      an empty string.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.SetFloat(System.String,System.Single)">
             <summary>
             Sets a float value with the specified name into the Map.
             </summary> 
            
             <param name="name">the name of the float</param>
             <param name="value">the float value to set in the Map</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:System.ArgumentException">if the name is null or if the name is
                                      an empty string.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.SetDouble(System.String,System.Double)">
             <summary>
             Sets a double value with the specified name into the Map.
             </summary> 
            
             <param name="name">the name of the double</param>
             <param name="value">the double value to set in the Map</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:System.ArgumentException">if the name is null or if the name is
                                      an empty string.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.SetString(System.String,System.String)">
             <summary>
             Sets a String value with the specified name into the Map.
             </summary> 
            
             <param name="name">the name of the String</param>
             <param name="value">the String value to set in the Map</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:System.ArgumentException">if the name is null or if the name is
                                      an empty string.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.SetBytes(System.String,System.Byte[])">
             <summary>
             Sets a byte array value with the specified name into the Map.
             </summary> 
            
             <param name="name">the name of the byte array</param>
             <param name="value">the byte array value to set in the Map; the array
                          is copied so that the value for name will
                          not be altered by future modifications</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:System.ArgumentException">if the name is null, or if the name is
                                      an empty string.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.SetBytes(System.String,System.Byte[],System.Int32,System.Int32)">
             <summary>
             Sets a portion of the byte array value with the specified name into the 
             Map.
             </summary> 
              
             <param name="name">the name of the byte array</param>
             <param name="value">the byte array value to set in the Map</param>
             <param name="offset">the initial offset within the byte array</param>
             <param name="length">the number of bytes to use</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:System.ArgumentException">if the name is null or if the name is
                                      an empty string.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.SetObject(System.String,System.Object)">
             <summary>
             Sets an object value with the specified name into the Map.
            
             <para>This method works only for the objectified primitive
             object types (Integer, Double, 
             Long...), String objects, and byte 
             arrays.</para>
             </summary> 
            
             <param name="name">the name of the object</param>
             <param name="value">the object value to set in the Map</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:System.ArgumentException">if the name is null or if the name is
                                      an empty string.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if the object is invalid.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMapMessage.ItemExists(System.String)">
             <summary>
             Indicates whether an item exists in this IMapMessage object.
             </summary> 
            
             <param name="name">the name of the item to test</param>
            
             <returns>true if the item exists</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to determine if the 
                                     item exists due to some internal error.</exception>
        </member>
        <member name="P:Kaazing.JMS.IMapMessage.MapNames">
             <summary>
             Returns an Enumeration of all the names in the 
             IMapMessage object.
             </summary>
            
             <returns>an enumeration of all the names in this IMapMessage</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
        </member>
        <member name="T:Kaazing.JMS.IMessageConsumer">
             <summary>
             A client uses a MessageConsumer object to receive messages 
             from a destination.  A MessageConsumer object is created by 
             passing a Destination object to a message-consumer creation
             method supplied by a session.
            
             <para>MessageConsumer is the parent interface for all message 
             consumers.</para>
            
             <para>A message consumer can be created with a message selector. A message
             selector allows 
             the client to restrict the messages delivered to the message consumer to 
             those that match the selector.</para>
            
             <para>A client may either synchronously receive a message consumer's messages 
             or have the consumer asynchronously deliver them as they arrive.</para>
            
             <para>For synchronous receipt, a client can request the next message from a 
             message consumer using one of its receive methods. There are 
             several variations of receive that allow a 
             client to poll or wait for the next message.</para>
            
             <para>For asynchronous delivery, a client can register a 
             MessageListener object with a message consumer. 
             As messages arrive at the message consumer, it delivers them by calling the 
             MessageListener's onMessage method.</para>
            
             <para>It is a client programming error for a MessageListener to 
             throw an exception.</para>
            
            
             <seealso cref="T:Kaazing.JMS.IQueueReceiver"/>
             <seealso cref="T:Kaazing.JMS.ITopicSubscriber"/>
             <seealso cref="T:Kaazing.JMS.ISession"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.IMessageConsumer.Receive">
             <summary>
             Receives the next message produced for this message consumer.
              
             <para>This call blocks indefinitely until a message is produced
             or until this message consumer is closed.</para>
            
             <para>If this receive is done within a transaction, the 
             consumer retains the message until the transaction commits.</para>
             </summary>
              
             <returns>the next message produced for this message consumer, or 
             null if this message consumer is concurrently closed</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to receive the next
                                     message due to some internal error.</exception>
             
        </member>
        <member name="M:Kaazing.JMS.IMessageConsumer.Receive(System.Int64)">
             <summary>
             Receives the next message that arrives within the specified
             timeout interval.
              
             <para>This call blocks until a message arrives, the
             timeout expires, or this message consumer is closed.
             A timeout of zero never expires, and the call blocks 
             indefinitely.</para>
             </summary>
            
             <param name="timeout">the timeout value (in milliseconds)</param>
            
             <returns>the next message produced for this message consumer, or 
             null if the timeout expires or this message consumer is concurrently 
             closed</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to receive the next
                                     message due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMessageConsumer.ReceiveNoWait">
             <summary>
             Receives the next message if one is immediately available.
            
             <returns>the next message produced for this message consumer, or 
             null if one is not available</returns>
              
             </summary>
            
             <returns>the next message produced for this message consumer, or 
             null if one is not available</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to receive the next
                                     message due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMessageConsumer.Close">
             <summary>
             Closes the message consumer.
            
             <para>Since a provider may allocate some resources on behalf of a
             MessageConsumer outside the Java virtual machine, clients 
             should close them when they
             are not needed. Relying on garbage collection to eventually reclaim
             these resources may not be timely enough.</para>
            
             <para>This call blocks until a receive or message listener in 
             progress has completed. A blocked message consumer receive 
             call 
             returns null when this message consumer is closed.</para>
             </summary>
              
             <param name="callback">called when the operation has completed</param>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to close the consumer
                                     due to some internal error.</exception>
        </member>
        <member name="P:Kaazing.JMS.IMessageConsumer.MessageSelector">
            <summary>
            Gets this message consumer's message selector expression.
            </summary>
             
            <returns>this message consumer's message selector, or null if no
                    message selector exists for the message consumer (that is, if 
                    the message selector was not set or was set to null or the 
                    empty string)</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the message
                                    selector due to some internal error.</exception>
        </member>
        <member name="P:Kaazing.JMS.IMessageConsumer.MessageListener">
             <summary>
             <para>Sets the message consumer's MessageListener.</para>
             
             <para>Setting the message listener to null is the equivalent of 
             unsetting the message listener for the message consumer.</para>
            
             <para>The effect of calling MessageConsumer.setMessageListener
             while messages are being consumed by an existing listener
             or the consumer is being used to consume messages synchronously
             is undefined.</para>
             </summary>
              
             <param name="listener">the listener to which the messages are to be 
                             delivered</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the message
                                     listener due to some internal error.</exception>
             <seealso cref="P:Kaazing.JMS.IMessageConsumer.MessageListener"/>
        </member>
        <member name="T:Kaazing.JMS.IMessageProducer">
             <summary>
             A client uses a MessageProducer object to send messages to a 
             destination. A MessageProducer object is created by passing a 
             Destination object to a message-producer creation method 
             supplied by a session.
            
             <para>MessageProducer is the parent interface for all message 
             producers.</para>
            
             <para>A client also has the option of creating a message producer without 
             supplying a destination. In this case, a destination must be provided with 
             every send operation. A typical use for this kind of message producer is
             to send replies to requests using the request's JMSReplyTo 
             destination.</para>
            
             <para>A client can specify a default delivery mode, priority, and time to live 
             for messages sent by a message producer. It can also specify the delivery 
             mode, priority, and time to live for an individual message.</para>
            
             <para>A client can specify a time-to-live value in milliseconds for each
             message it sends. This value defines a message expiration time that
             is the sum of the message's time-to-live and the GMT when it is sent (for
             transacted sends, this is the time the client sends the message, not
             the time the transaction is committed).</para>
            
             <para>A JMS provider should do its best to expire messages accurately;
             however, the JMS API does not define the accuracy provided.</para>
            
            
             <seealso cref="T:Kaazing.JMS.ITopicPublisher"/>
             <seealso cref="T:Kaazing.JMS.IQueueSender"/>
             <seealso cref="M:Kaazing.JMS.ISession.CreateProducer(Kaazing.JMS.IDestination)"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.IMessageProducer.Close">
             <summary>
             Closes the message producer.
            
             <para>Since a provider may allocate some resources on behalf of a
             MessageProducer outside the Java virtual machine, clients 
             should close them when they
             are not needed. Relying on garbage collection to eventually reclaim
             these resources may not be timely enough.</para>
              
             </summary>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to close the producer
                                     due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.IMessageProducer.Send(Kaazing.JMS.IMessage)">
             <summary>
             Sends a message using the MessageProducer's 
             default delivery mode, priority, and time to live.
             </summary>
            
             <param name="message">the message to send </param>
             <param name="callback">called when the operation has completed</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to send the message 
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if an invalid message is specified.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if a client uses
                                     this method with a MessageProducer with
                                     an invalid destination.</exception>
             <exception cref="!:java">.lang.UnsupportedOperationException if a client uses this
                                     method with a MessageProducer that did
                                     not specify a destination at creation time.</exception>
             
             <seealso cref="M:Kaazing.JMS.ISession.CreateProducer(Kaazing.JMS.IDestination)"/>
             <seealso cref="T:Kaazing.JMS.IMessageProducer"/>
            
        </member>
        <member name="M:Kaazing.JMS.IMessageProducer.Send(Kaazing.JMS.IMessage,System.Int32,System.Int32,System.Int64)">
             <summary>
             Sends a message to the destination, specifying delivery mode, priority, and 
             time to live.
             </summary>
            
             <param name="message">the message to send</param>
             <param name="deliveryMode">the delivery mode to use</param>
             <param name="priority">the priority for this message</param>
             <param name="timeToLive">the message's lifetime (in milliseconds)</param>
             <param name="callback">called when the operation has completed</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to send the message 
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if an invalid message is specified.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if a client uses
                                     this method with a MessageProducer with
                                     an invalid destination.</exception>
             <exception cref="!:java">.lang.UnsupportedOperationException if a client uses this
                                     method with a MessageProducer that did
                                     not specify a destination at creation time.</exception>
            
             <seealso cref="M:Kaazing.JMS.ISession.CreateProducer(Kaazing.JMS.IDestination)"/>
        </member>
        <member name="M:Kaazing.JMS.IMessageProducer.Send(Kaazing.JMS.IDestination,Kaazing.JMS.IMessage)">
             <summary>
            Sends a message to a destination for an unidentified message producer.
             Uses the MessageProducer's default delivery mode, priority,
             and time to live.
            
             <para>Typically, a message producer is assigned a destination at creation 
             time; however, the JMS API also supports unidentified message producers,
             which require that the destination be supplied every time a message is
             sent. </para>
             </summary>
              
             <param name="destination">the destination to send this message to</param>
             <param name="message">the message to send</param>
             <param name="callback">called when the operation has completed</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to send the message 
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if an invalid message is specified.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if a client uses
                                     this method with an invalid destination.</exception>
             <exception cref="!:java">.lang.UnsupportedOperationException if a client uses this
                                     method with a MessageProducer that 
                                     specified a destination at creation time.</exception>
             
             <seealso cref="M:Kaazing.JMS.ISession.CreateProducer(Kaazing.JMS.IDestination)"/>
             <seealso cref="T:Kaazing.JMS.IMessageProducer"/>
        </member>
        <member name="M:Kaazing.JMS.IMessageProducer.Send(Kaazing.JMS.IDestination,Kaazing.JMS.IMessage,System.Int32,System.Int32,System.Int64)">
             <summary>
             Sends a message to a destination for an unidentified message producer, 
             specifying delivery mode, priority and time to live.
              
             <para>Typically, a message producer is assigned a destination at creation 
             time; however, the JMS API also supports unidentified message producers,
             which require that the destination be supplied every time a message is
             sent. </para>
             </summary>
              
             <param name="destination">the destination to send this message to</param>
             <param name="message">the message to send</param>
             <param name="deliveryMode">the delivery mode to use</param>
             <param name="priority">the priority for this message</param>
             <param name="timeToLive">the message's lifetime (in milliseconds)</param>
             <param name="callback">called when the operation has completed</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to send the message 
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if an invalid message is specified.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if a client uses
                                     this method with an invalid destination.</exception>
            
             <seealso cref="M:Kaazing.JMS.ISession.CreateProducer(Kaazing.JMS.IDestination)"/>
        </member>
        <member name="P:Kaazing.JMS.IMessageProducer.DisableMessageID">
            <summary>
            <para>Gets an indication of whether message IDs are disabled.</para>
            </summary>
             
            <returns>an indication of whether message IDs are disabled</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to determine if 
                                    message IDs are disabled due to some internal 
                                    error.</exception>
        </member>
        <member name="P:Kaazing.JMS.IMessageProducer.DisableMessageTimestamp">
            <summary>
            <para>Gets an indication of whether message timestamps are disabled.</para>
            </summary>
             
            <returns>an indication of whether message timestamps are disabled</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to determine if 
                                    timestamps are disabled due to some internal 
                                    error.</exception>
        </member>
        <member name="P:Kaazing.JMS.IMessageProducer.DeliveryMode">
             <summary>
             Sets the producer's default delivery mode.
              
             <para>Delivery mode is set to PERSISTENT by default.</para>
             </summary>
            
             <param name="deliveryMode">the message delivery mode for this message
             producer; legal values are DeliveryMode.NON_PERSISTENT
             and DeliveryMode.PERSISTENT</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the delivery 
                                     mode due to some internal error.</exception>          
            
             <seealso cref="P:Kaazing.JMS.IMessageProducer.DeliveryMode"/>
             <seealso cref="F:Kaazing.JMS.DeliveryModeConstants.NON_PERSISTENT"/>
             <seealso cref="F:Kaazing.JMS.DeliveryModeConstants.PERSISTENT"/>
             <seealso cref="F:Kaazing.JMS.MessageConstants.DEFAULT_DELIVERY_MODE"/>
             <summary>
             <para>Gets the producer's default delivery mode.</para>
             </summary>
              
             <returns>the message delivery mode for this message producer</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the delivery 
                                     mode due to some internal error.</exception>
            
             <seealso cref="P:Kaazing.JMS.IMessageProducer.DeliveryMode"/>
        </member>
        <member name="P:Kaazing.JMS.IMessageProducer.Priority">
             <summary>
             Sets the producer's default priority.
              
             <para>The JMS API defines ten levels of priority value, with 0 as the 
             lowest priority and 9 as the highest. Clients should consider priorities
             0-4 as gradations of normal priority and priorities 5-9 as gradations 
             of expedited priority. Priority is set to 4 by default.</para>
             </summary>
            
             <param name="defaultPriority">the message priority for this message producer;
                                    must be a value between 0 and 9</param>
             
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the priority
                                     due to some internal error.</exception>
            
             <seealso cref="P:Kaazing.JMS.IMessageProducer.Priority"/>
             <seealso cref="F:Kaazing.JMS.MessageConstants.DEFAULT_PRIORITY"/>
             <summary>
             <para>Gets the producer's default priority.</para>
             </summary>
              
             <returns>the message priority for this message producer</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the priority
                                     due to some internal error.</exception>
            
             <seealso cref="P:Kaazing.JMS.IMessageProducer.Priority"/>
        </member>
        <member name="P:Kaazing.JMS.IMessageProducer.TimeToLive">
             <summary>
             <para>Gets the default length of time in milliseconds from its dispatch time
             that a produced message should be retained by the message system.</para>
             </summary>
            
             <returns>the message time to live in milliseconds; zero is unlimited</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the time to 
                                     live due to some internal error.</exception>
            
             <seealso cref="P:Kaazing.JMS.IMessageProducer.TimeToLive"/>
        </member>
        <member name="P:Kaazing.JMS.IMessageProducer.Destination">
            <summary>
            Gets the destination associated with this MessageProducer.
            </summary>
             
            <returns>this producer's Destination</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the destination for
                                    this MessageProducer
                                    due to some internal error.</exception>
        </member>
        <member name="T:Kaazing.JMS.IObjectMessage">
             <summary>
             An ObjectMessage object is used to send a message that contains
             a serializable object .
             It inherits from the Message interface and adds a body
             containing a single reference to an object. Only Serializable 
             objects can be used.
            
             <para>If a collection of objects must be sent, one of the 
             Collection classes provided since JDK 1.2 can be used.</para>
            
             <para>When a client receives an ObjectMessage, it is in read-only 
             mode. If a client attempts to write to the message at this point, a 
             MessageNotWriteableException is thrown. If 
             clearBody is called, the message can now be both read from and 
             written to.</para>
            
            
             <seealso cref="M:Kaazing.JMS.ISession.CreateObjectMessage"/>
             <seealso cref="!:Kaazing.JMS.ISession.CreateObjectMessage(ISerializable)"/>
             <seealso cref="T:Kaazing.JMS.IBytesMessage"/>
             <seealso cref="T:Kaazing.JMS.IMapMessage"/>
             <seealso cref="T:Kaazing.JMS.IMessage"/>
             <seealso cref="T:Kaazing.JMS.IStreamMessage"/>
             <seealso cref="T:Kaazing.JMS.ITextMessage"/>
             </summary>
        </member>
        <member name="P:Kaazing.JMS.IObjectMessage.Object">
             <summary>
             <para>Gets the serializable object containing this message's data. The 
             default value is null.</para>
             </summary>
            
             <returns>the serializable object containing this message's data</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the object
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if object deserialization fails.</exception>
        </member>
        <member name="T:Kaazing.JMS.IQueue">
             <summary>
             A Queue object encapsulates a provider-specific queue name. 
             It is the way a client specifies the identity of a queue to JMS API methods.
             For those methods that use a Destination as a parameter, a 
             Queue object used as an argument. For example, a queue can
             be used  to create a MessageConsumer and a 
             MessageProducer  by calling:
            <list type="bullet">
            <item> Session.CreateConsumer(Destination destination)</item>
            <item> Session.CreateProducer(Destination destination)</item>
            </list>
            
             <para>The actual length of time messages are held by a queue and the 
             consequences of resource overflow are not defined by the JMS API.</para>
            
            
            
            
             <seealso cref="M:Kaazing.JMS.ISession.CreateConsumer(Kaazing.JMS.IDestination)"/>
             <seealso cref="M:Kaazing.JMS.ISession.CreateProducer(Kaazing.JMS.IDestination)"/>
             <seealso cref="M:Kaazing.JMS.ISession.CreateQueue(System.String)"/>
             <seealso cref="M:Kaazing.JMS.IQueueSession.CreateQueue(System.String)"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.IQueue.ToString">
             <summary>
             Returns a string representation of this object.
             </summary>
            
             <returns>the provider-specific identity values for this queue</returns>
        </member>
        <member name="P:Kaazing.JMS.IQueue.QueueName">
            <summary>
            Gets the name of this queue.
             
            <para>Clients that depend upon the name are not portable.</para>
            </summary>
             
            <returns>the queue name</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider implementation of 
                                    Queue fails to return the queue
                                    name due to some internal
                                    error.</exception>
        </member>
        <member name="T:Kaazing.JMS.ITopic">
             <summary>
             A Topic object encapsulates a provider-specific topic name. 
             It is the way a client specifies the identity of a topic to JMS API methods.
             For those methods that use a Destination as a parameter, a 
             Topic object may used as an argument . For 
             example, a Topic can be used to create a MessageConsumer
             and a MessageProducer
             by calling:
            <list type="bullet">
            <item> Session.CreateConsumer(Destination destination)</item>
            <item> Session.CreateProducer(Destination destination)</item>
            
            </list>
            
             <para>Many publish/subscribe (pub/sub) providers group topics into hierarchies 
             and provide various options for subscribing to parts of the hierarchy. The 
             JMS API places no restriction on what a Topic object 
             represents. It may be a leaf in a topic hierarchy, or it may be a larger 
             part of the hierarchy.</para>
            
             <para>The organization of topics and the granularity of subscriptions to 
             them is an important part of a pub/sub application's architecture. The JMS 
             API 
             does not specify a policy for how this should be done. If an application 
             takes advantage of a provider-specific topic-grouping mechanism, it 
             should document this. If the application is installed using a different 
             provider, it is the job of the administrator to construct an equivalent 
             topic architecture and create equivalent Topic objects.</para>
            
            
             <seealso cref="M:Kaazing.JMS.ISession.CreateConsumer(Kaazing.JMS.IDestination)"/>
             <seealso cref="M:Kaazing.JMS.ISession.CreateProducer(Kaazing.JMS.IDestination)"/>
             <seealso cref="M:Kaazing.JMS.ITopicSession.CreateTopic(System.String)"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.ITopic.ToString">
             <summary>
             Returns a string representation of this object.
            
             <returns>the provider-specific identity values for this topic</returns>
             </summary>
        </member>
        <member name="P:Kaazing.JMS.ITopic.TopicName">
            <summary>
            Gets the name of this topic.
             
            <para>Clients that depend upon the name are not portable.</para>
            </summary>
             
            <returns>the topic name</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider implementation of 
                                    Topic fails to return the topic
                                    name due to some internal
                                    error.</exception>
        </member>
        <member name="T:Kaazing.JMS.ISession">
             <summary>
             <para>A Session object is a single-threaded context for producing and consuming 
             messages. Although it may allocate provider resources outside the Java 
             virtual machine (JVM), it is considered a lightweight JMS object.</para>
            
             <para>A session serves several purposes:
            
             <list type="bullet">
               <item>It is a factory for its message producers and consumers.</item>
               <item>It supplies provider-optimized message factories.</item>
               <item>It is a factory for TemporaryTopics and 
                    TemporaryQueues. </item>
               <item> It provides a way to create Queue or Topic
                  objects for those clients that need to dynamically manipulate 
                  provider-specific destination names.</item>
               <item>It supports a single series of transactions that combine work 
                   spanning its producers and consumers into atomic units.</item>
               <item>It defines a serial order for the messages it consumes and 
                   the messages it produces.</item>
               <item>It retains messages it consumes until they have been 
                   acknowledged.</item>
               <item>It serializes execution of message listeners registered with 
                   its message consumers.</item>
               <item> It is a factory for QueueBrowsers.</item>
             </list></para>
            
             <para>A session can create and service multiple message producers and 
             consumers.</para>
            
             <para>One typical use is to have a thread block on a synchronous 
             MessageConsumer until a message arrives. The thread may then
             use one or more of the Session's MessageProducers.</para>
            
             <para>If a client desires to have one thread produce messages while others 
             consume them, the client should use a separate session for its producing 
             thread.</para>
            
             <para>Once a connection has been started, any session with one or more 
             registered message listeners is dedicated to the thread of control that 
             delivers messages to it. It is erroneous for client code to use this session
             or any of its constituent objects from another thread of control. The
             only exception to this rule is the use of the session or connection 
             close method.</para>
            
             <para>It should be easy for most clients to partition their work naturally
             into sessions. This model allows clients to start simply and incrementally
             add message processing complexity as their need for concurrency grows.</para>
            
             <para>The close method is the only session method that can be 
             called while some other session method is being executed in another thread.</para>
            
             <para>A session may be specified as transacted. Each transacted 
             session supports a single series of transactions. Each transaction groups 
             a set of message sends and a set of message receives into an atomic unit 
             of work. In effect, transactions organize a session's input message 
             stream and output message stream into series of atomic units. When a 
             transaction commits, its atomic unit of input is acknowledged and its 
             associated atomic unit of output is sent. If a transaction rollback is 
             done, the transaction's sent messages are destroyed and the session's input 
             is automatically recovered.</para>
            
             <para>The content of a transaction's input and output units is simply those 
             messages that have been produced and consumed within the session's current 
             transaction.</para>
            
             <para>A transaction is completed using either its session's commit
             method or its session's rollback method. The completion of a
             session's current transaction automatically begins the next. The result is
             that a transacted session always has a current transaction within which its 
             work is done.  </para>
            
             <para>The Java Transaction Service (JTS) or some other transaction monitor may 
             be used to combine a session's transaction with transactions on other 
             resources (databases, other JMS sessions, etc.). Since Java distributed 
             transactions are controlled via the Java Transaction API (JTA), use of the 
             session's commit and rollback methods in 
             this context is prohibited.</para>
            
             <para>The JMS API does not require support for JTA; however, it does define 
             how a provider supplies this support.</para>
            
             <para>Although it is also possible for a JMS client to handle distributed 
             transactions directly, it is unlikely that many JMS clients will do this.
             Support for JTA in the JMS API is targeted at systems vendors who will be 
             integrating the JMS API into their application server products.</para>
            
            
             <seealso cref="T:Kaazing.JMS.IQueueSession"/>
             <seealso cref="T:Kaazing.JMS.ITopicSession"/>
             <seealso cref="!:Kaazing.JMS.IXASession"/>
             </summary> 
        </member>
        <member name="M:Kaazing.JMS.ISession.CreateBytesMessage">
            <summary>
            Creates a BytesMessage object. A BytesMessage 
            object is used to send a message containing a stream of uninterpreted 
            bytes.
             
            </summary>
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to create this message
                                    due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.ISession.CreateMapMessage">
             <summary>
             Creates a MapMessage object. A MapMessage 
             object is used to send a self-defining set of name-value pairs, where 
             names are String objects and values are primitive values 
            .
              
             </summary>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to create this message
                                     due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.ISession.CreateMessage">
            <summary>
            Creates a Message object. The Message 
            interface is the root interface of all JMS messages. A 
            Message object holds all the 
            standard message header information. It can be sent when a message 
            containing only header information is sufficient.
             
            </summary>
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to create this message
                                    due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.ISession.CreateObjectMessage">
            <summary>
            Creates an ObjectMessage object. An 
            ObjectMessage object is used to send a message 
            that contains a serializable object.
             
            </summary>
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to create this message
                                    due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.ISession.CreateObjectMessage(Kaazing.JMS.Util.ISerializable)">
             <summary>
             Creates an initialized ObjectMessage object. An 
             ObjectMessage object is used 
             to send a message that contains a serializable object.
             </summary>
              
             <param name="object">the object to use to initialize this message</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to create this message
                                     due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.ISession.CreateStreamMessage">
            <summary>
            Creates a StreamMessage object. A 
            StreamMessage object is used to send a 
            self-defining stream of primitive values in the Java programming 
            language.
             
            </summary>
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to create this message
                                    due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.ISession.CreateTextMessage">
            <summary>
            Creates a TextMessage object. A TextMessage 
            object is used to send a message containing a String
            object.
             
            </summary>
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to create this message
                                    due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.ISession.CreateTextMessage(System.String)">
             <summary>
             Creates an initialized TextMessage object. A 
             TextMessage object is used to send 
             a message containing a String.
             </summary>
            
             <param name="text">the string used to initialize this message</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to create this message
                                     due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.ISession.Commit">
            <summary>
            Commits all messages done in this transaction and releases any locks
            currently held.
            </summary>
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to commit the
                                    transaction due to some internal error.</exception>
            <exception cref="T:Kaazing.JMS.TransactionRolledBackException">if the transaction
                                    is rolled back due to some internal error
                                    during commit.</exception>
            <exception cref="T:Kaazing.JMS.IllegalStateException">if the method is not called by a 
                                    transacted session.</exception>
        </member>
        <member name="M:Kaazing.JMS.ISession.Rollback">
             <summary>
             Rolls back any messages done in this transaction and releases any locks 
             currently held.
            
             </summary>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to roll back the
                                     transaction due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.IllegalStateException">if the method is not called by a 
                                     transacted session.</exception>
                                                 
        </member>
        <member name="M:Kaazing.JMS.ISession.Close">
             <summary>
             Closes the session.
            
             <para>Since a provider may allocate some resources on behalf of a session 
             outside the JVM, clients should close the resources when they are not 
             needed. 
             Relying on garbage collection to eventually reclaim these resources 
             may not be timely enough.</para>
            
             <para>There is no need to close the producers and consumers
             of a closed session. </para>
            
             <para> This call will block until a receive call or message 
             listener in progress has completed. A blocked message consumer
             receive call returns null when this session 
             is closed.</para>
            
             <para>Closing a transacted session must roll back the transaction
             in progress.</para>
             
             <para>This method is the only Session method that can 
             be called concurrently. </para>
            
             <para>Invoking any other Session method on a closed session 
             must throw a JMSException.IllegalStateException. Closing a 
             closed session must <I>not</I> throw an exception.</para>
             
             </summary>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to close the
                                     session due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.ISession.Recover">
             <summary>
             Stops message delivery in this session, and restarts message delivery
             with the oldest unacknowledged message.
              
             <para>All consumers deliver messages in a serial order.
             Acknowledging a received message automatically acknowledges all 
             messages that have been delivered to the client.</para>
            
             <para>Restarting a session causes it to take the following actions:
            
             <list type="bullet">
               <item>Stop message delivery</item>
               <item>Mark all messages that might have been delivered but not 
                   acknowledged as "redelivered"</item>
               <item>Restart the delivery sequence including all unacknowledged 
                   messages that had been previously delivered. Redelivered messages
                   do not have to be delivered in 
                   exactly their original delivery order.</item>
             </list></para>
            
             </summary>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to stop and restart
                                     message delivery due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.IllegalStateException">if the method is called by a 
                                     transacted session.</exception>
        </member>
        <member name="M:Kaazing.JMS.ISession.Run">
             <summary>
            
             Optional operation, intended to be used only by Application Servers,
             not by ordinary JMS clients.
            
             <seealso cref="T:Kaazing.JMS.IServerSession"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.ISession.CreateProducer(Kaazing.JMS.IDestination)">
             <summary>
             Creates a MessageProducer to send messages to the specified 
             destination.
            
             <para>A client uses a MessageProducer object to send 
             messages to a destination. Since Queue and Topic 
             both inherit from Destination, they can be used in
             the destination parameter to create a MessageProducer object.</para>
             </summary>
             
             <param name="destination">the Destination to send to, 
             or null if this is a producer which does not have a specified 
             destination.</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a MessageProducer
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid destination
             is specified.</exception>
            
             
        </member>
        <member name="M:Kaazing.JMS.ISession.CreateConsumer(Kaazing.JMS.IDestination)">
             <summary>
             Creates a MessageConsumer for the specified destination.
             Since Queue and Topic 
             both inherit from Destination, they can be used in
             the destination parameter to create a MessageConsumer.
             </summary>
            
             <param name="destination">the Destination to access. </param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a consumer
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid destination 
                                     is specified.</exception>
            
        </member>
        <member name="M:Kaazing.JMS.ISession.CreateConsumer(Kaazing.JMS.IDestination,System.String)">
             <summary>
             Creates a IMessageConsumer for the specified destination, 
             using a message selector. 
             Since Queue and Topic 
             both inherit from Destination, they can be used in
             the destination parameter to create a MessageConsumer.
            
             <para>A client uses a IMessageConsumer object to receive 
             messages that have been sent to a destination.</para>
              
              
             </summary>
                   
             <param name="destination">the IDestination to access</param>
             <param name="messageSelector">only messages with properties matching the
             message selector expression are delivered. A value of null or
             an empty string indicates that there is no message selector 
             for the message consumer. </param>
             
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a consumer
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid destination 
                                     is specified.</exception>
             <exception cref="T:Kaazing.JMS.InvalidSelectorException">if the message selector is invalid.</exception>
        </member>
        <member name="M:Kaazing.JMS.ISession.CreateConsumer(Kaazing.JMS.IDestination,System.String,System.Boolean)">
            <exception cref="T:Kaazing.JMS.InvalidSelectorException">if the message selector is invalid.</exception>
        </member>
        <member name="M:Kaazing.JMS.ISession.CreateQueue(System.String)">
             <summary>
             Creates a queue identity given a Queue name.
            
             <para>This facility is provided for the rare cases where clients need to
             dynamically manipulate queue identity. It allows the creation of a
             queue identity with a provider-specific name. Clients that depend 
             on this ability are not portable.</para>
            
             <para>Note that this method is not for creating the physical queue. 
             The physical creation of queues is an administrative task and is not
             to be initiated by the JMS API. The one exception is the
             creation of temporary queues, which is accomplished with the 
             createTemporaryQueue method.</para>
             </summary>
            
             <param name="queueName">the name of this Queue</param>
            
             <returns>a Queue with the given name</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a queue
                                     due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.ISession.CreateTopic(System.String)">
             <summary>
             Creates a topic identity given a Topic name.
            
             <para>This facility is provided for the rare cases where clients need to
             dynamically manipulate topic identity. This allows the creation of a
             topic identity with a provider-specific name. Clients that depend 
             on this ability are not portable.</para>
            
             <para>Note that this method is not for creating the physical topic. 
             The physical creation of topics is an administrative task and is not
             to be initiated by the JMS API. The one exception is the
             creation of temporary topics, which is accomplished with the 
             createTemporaryTopic method.</para>
             </summary>
              
             <param name="topicName">the name of this Topic</param>
            
             <returns>a Topic with the given name</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a topic
                                     due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.ISession.CreateDurableSubscriber(Kaazing.JMS.ITopic,System.String)">
             <summary>
             Creates a durable subscriber to the specified topic.
              
             <para>If a client needs to receive all the messages published on a 
             topic, including the ones published while the subscriber is inactive,
             it uses a durable TopicSubscriber. The JMS provider
             retains a record of this 
             durable subscription and insures that all messages from the topic's 
             publishers are retained until they are acknowledged by this 
             durable subscriber or they have expired.</para>
            
             <para>Sessions with durable subscribers must always provide the same 
             client identifier. In addition, each client must specify a name that 
             uniquely identifies (within client identifier) each durable 
             subscription it creates. Only one session at a time can have a 
             TopicSubscriber for a particular durable subscription.</para>
            
             <para>A client can change an existing durable subscription by creating 
             a durable TopicSubscriber with the same name and a new 
             topic and/or 
             message selector. Changing a durable subscriber is equivalent to 
             unsubscribing (deleting) the old one and creating a new one.</para>
            
             <para>In some cases, a connection may both publish and subscribe to a 
             topic. The subscriber NoLocal attribute allows a subscriber
             to inhibit the delivery of messages published by its own connection.
             The default value for this attribute is false.</para>
             </summary>
            
             <param name="topic">the non-temporary Topic to subscribe to</param>
             <param name="name">the name used to identify this subscription</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a subscriber
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid topic is specified.</exception>
        </member>
        <member name="M:Kaazing.JMS.ISession.CreateDurableSubscriber(Kaazing.JMS.ITopic,System.String,System.String,System.Boolean)">
             <summary>
             Creates a durable subscriber to the specified topic, using a
             message selector and specifying whether messages published by its
             own connection should be delivered to it.
              
             <para>If a client needs to receive all the messages published on a 
             topic, including the ones published while the subscriber is inactive,
             it uses a durable TopicSubscriber. The JMS provider
             retains a record of this 
             durable subscription and insures that all messages from the topic's 
             publishers are retained until they are acknowledged by this 
             durable subscriber or they have expired.</para>
            
             <para>Sessions with durable subscribers must always provide the same
             client identifier. In addition, each client must specify a name which
             uniquely identifies (within client identifier) each durable
             subscription it creates. Only one session at a time can have a
             TopicSubscriber for a particular durable subscription.
             An inactive durable subscriber is one that exists but
             does not currently have a message consumer associated with it.</para>
            
             <para>A client can change an existing durable subscription by creating 
             a durable TopicSubscriber with the same name and a new 
             topic and/or 
             message selector. Changing a durable subscriber is equivalent to 
             unsubscribing (deleting) the old one and creating a new one.</para>
             </summary>
            
             <param name="topic">the non-temporary Topic to subscribe to</param>
             <param name="name">the name used to identify this subscription</param>
             <param name="messageSelector">only messages with properties matching the
             message selector expression are delivered.  A value of null or
             an empty string indicates that there is no message selector 
             for the message consumer.</param>
             <param name="noLocal">if set, inhibits the delivery of messages published
             by its own connection</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a subscriber
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid topic is specified.</exception>
             <exception cref="T:Kaazing.JMS.InvalidSelectorException">if the message selector is invalid.</exception>
        </member>
        <member name="M:Kaazing.JMS.ISession.CreateBrowser(Kaazing.JMS.IQueue)">
             <summary>
             Creates a QueueBrowser object to peek at the messages on 
             the specified queue.
             </summary>
              
             <param name="queue">the queue to access</param>
            
              
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a browser
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid destination
                                     is specified </exception>
        </member>
        <member name="M:Kaazing.JMS.ISession.CreateBrowser(Kaazing.JMS.IQueue,System.String)">
             <summary>
             Creates a QueueBrowser object to peek at the messages on 
             the specified queue using a message selector.
             </summary>
              
             <param name="queue">the queue to access</param>
            
             <param name="messageSelector">only messages with properties matching the
             message selector expression are delivered. A value of null or
             an empty string indicates that there is no message selector 
             for the message consumer.</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a browser
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid destination
                                     is specified </exception>
             <exception cref="T:Kaazing.JMS.InvalidSelectorException">if the message selector is invalid.</exception>
        </member>
        <member name="M:Kaazing.JMS.ISession.CreateTemporaryQueue">
             <summary>
             Creates a TemporaryQueue object. Its lifetime will be that 
             of the Connection unless it is deleted earlier.
             </summary>
            
             <returns>a temporary queue identity</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a temporary queue
                                     due to some internal error.</exception>
            
        </member>
        <member name="M:Kaazing.JMS.ISession.CreateTemporaryTopic">
             <summary>
             Creates a TemporaryTopic object. Its lifetime will be that 
             of the Connection unless it is deleted earlier.
             </summary>
            
             <returns>a temporary topic identity</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a temporary
                                     topic due to some internal error.</exception>
            
        </member>
        <member name="M:Kaazing.JMS.ISession.Unsubscribe(System.String)">
             <summary>
             Unsubscribes a durable subscription that has been created by a client.
              
             <para>This method deletes the state being maintained on behalf of the 
             subscriber by its provider.</para>
            
             <para>It is erroneous for a client to delete a durable subscription
             while there is an active MessageConsumer
             or TopicSubscriber for the 
             subscription, or while a consumed message is part of a pending 
             transaction or has not been acknowledged in the session.</para>
             </summary>
            
             <param name="name">the name used to identify this subscription</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to unsubscribe to the 
                                     durable subscription due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid subscription name
                                                    is specified.</exception>
            
        </member>
        <member name="P:Kaazing.JMS.ISession.Transacted">
            <summary>
            Indicates whether the session is in transacted mode.
            </summary>
             
            <returns>true if the session is in transacted mode</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to return the 
                                    transaction mode due to some internal error.</exception>
        </member>
        <member name="P:Kaazing.JMS.ISession.AcknowledgeMode">
             <summary>
             Returns the acknowledgement mode of the session. The acknowledgement
             mode is set at the time that the session is created. If the session is
             transacted, the acknowledgement mode is ignored.
             </summary>
            
             <returns>If the session is not transacted, returns the 
                              current acknowledgement mode for the session.
                              If the session
                              is transacted, returns SESSION_TRANSACTED.</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to return the 
                                     acknowledgment mode due to some internal error.</exception>
            
            <seealso cref="M:Kaazing.JMS.IConnection.CreateSession(System.Boolean,System.Int32)"/>
        </member>
        <member name="P:Kaazing.JMS.ISession.MessageListener">
             <summary>
             <para>Sets the session's distinguished message listener (optional).</para>
            
             <para>When the distinguished message listener is set, no other form of 
             message receipt in the session can 
             be used; however, all forms of sending messages are still supported.</para>
             
             <para>This is an expert facility not used by regular JMS clients.</para>
             </summary>
            
             <param name="listener">the message listener to associate with this session</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to set the message 
                                     listener due to an internal error.</exception>
            
             <seealso cref="P:Kaazing.JMS.ISession.MessageListener"/>
             <seealso cref="T:Kaazing.JMS.IServerSessionPool"/>
             <seealso cref="T:Kaazing.JMS.IServerSession"/>
        </member>
        <member name="T:Kaazing.JMS.IStreamMessage">
             <summary>
             A StreamMessage object is used to send a stream of primitive
             types. It is filled and read sequentially.
             It inherits from the Message interface
             and adds a stream message body. Its methods are based largely on those
             found in java.io.DataInputStream and
             java.io.DataOutputStream.
            
             <para>The primitive types can be read or written explicitly using methods
             for each type. They may also be read or written generically as objects.
             For instance, a call to StreamMessage.writeInt(6) is
             equivalent to StreamMessage.writeObject(new Integer(6)).
             Both forms are provided, because the explicit form is convenient for
             static programming, and the object form is needed when types are not known
             at compile time.</para>
            
             <para>When the message is first created, and when clearBody
             is called, the body of the message is in write-only mode. After the 
             first call to reset has been made, the message body is in 
             read-only mode. 
             After a message has been sent, the client that sent it can retain and 
             modify it without affecting the message that has been sent. The same message
             object can be sent multiple times.
             When a message has been received, the provider has called 
             reset so that the message body is in read-only mode for the client.</para>
             
             <para>If clearBody is called on a message in read-only mode, 
             the message body is cleared and the message body is in write-only mode.</para>
             
             <para>If a client attempts to read a message in write-only mode, a 
             MessageNotReadableException is thrown.</para>
             
             <para>If a client attempts to write a message in read-only mode, a 
             MessageNotWriteableException is thrown.</para>
            
             <para>StreamMessage objects support the following conversion 
             table. The marked cases must be supported. The unmarked cases must throw a 
             JMSException. The String-to-primitive conversions 
             may throw a runtime exception if the primitive's valueOf() 
             method does not accept it as a valid String representation of 
             the primitive.</para>
            
             <para>A value written as the row type can be read as the column type.</para>
            
             <code>
             |        | boolean byte short char int long float double String byte[]
             |----------------------------------------------------------------------
             |boolean |    X                                            X
             |byte    |          X     X         X   X                  X   
             |short   |                X         X   X                  X   
             |char    |                     X                           X
             |int     |                          X   X                  X   
             |long    |                              X                  X   
             |float   |                                    X     X      X   
             |double  |                                          X      X   
             |String  |    X     X     X         X   X     X     X      X   
             |byte[]  |                                                        X
             |----------------------------------------------------------------------
             </code>
            
             <para>Attempting to read a null value as a primitive type must be treated
             as calling the primitive's corresponding valueOf(String) 
             conversion method with a null value. Since char does not 
             support a String conversion, attempting to read a null value 
             as a char must throw a ArgumentException.</para>
            
            
             <seealso cref="M:Kaazing.JMS.ISession.CreateStreamMessage"/>
             <seealso cref="T:Kaazing.JMS.IBytesMessage"/>
             <seealso cref="T:Kaazing.JMS.IMapMessage"/>
             <seealso cref="T:Kaazing.JMS.IMessage"/>
             <seealso cref="T:Kaazing.JMS.IObjectMessage"/>
             <seealso cref="T:Kaazing.JMS.ITextMessage"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.ReadBoolean">
             <summary>
             Reads a boolean from the stream message.
             </summary>
            
             <returns>the boolean value read</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageEOFException">if unexpected end of message stream has
                                            been reached.</exception>     
             <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.ReadByte">
             <summary>
             Reads a byte value from the stream message.
             </summary>
            
             <returns>the next byte from the stream message as a 8-bit
             byte</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageEOFException">if unexpected end of message stream has
                                            been reached.</exception>     
             <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.ReadShort">
             <summary>
             Reads a 16-bit integer from the stream message.
             </summary>
            
             <returns>a 16-bit integer from the stream message</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageEOFException">if unexpected end of message stream has
                                            been reached.</exception>     
             <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.ReadChar">
             <summary>
             Reads a Unicode character value from the stream message.
             </summary>
            
             <returns>a Unicode character from the stream message</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageEOFException">if unexpected end of message stream has
                                            been reached.</exception>     
             <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid      </exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.ReadInt">
             <summary>
             Reads a 32-bit integer from the stream message.
             </summary>
            
             <returns>a 32-bit integer value from the stream message, interpreted
             as an int</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageEOFException">if unexpected end of message stream has
                                            been reached.</exception>     
             <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.ReadLong">
             <summary>
             Reads a 64-bit integer from the stream message.
             </summary>
            
             <returns>a 64-bit integer value from the stream message, interpreted as
             a long</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageEOFException">if unexpected end of message stream has
                                            been reached.</exception>     
             <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.ReadFloat">
             <summary>
             Reads a float from the stream message.
             </summary>
            
             <returns>a float value from the stream message</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageEOFException">if unexpected end of message stream has
                                            been reached.</exception>     
             <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.ReadDouble">
             <summary>
             Reads a double from the stream message.
             </summary>
            
             <returns>a double value from the stream message</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageEOFException">if unexpected end of message stream has
                                            been reached.</exception>     
             <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.ReadString">
             <summary>
             Reads a String from the stream message.
             </summary>
            
             <returns>a Unicode string from the stream message</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageEOFException">if unexpected end of message stream has
                                            been reached.</exception>     
             <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.ReadBytes(System.Byte[])">
             <summary>
             Reads a byte array field from the stream message into the 
             specified byte[] object (the read buffer). 
             
             <para>To read the field value, readBytes should be 
             successively called 
             until it returns a value less than the length of the read buffer.
             The value of the bytes in the buffer following the last byte 
             read is undefined.</para>
             
             <para>If readBytes returns a value equal to the length of the 
             buffer, a subsequent readBytes call must be made. If there 
             are no more bytes to be read, this call returns -1.</para>
             
             <para>If the byte array field value is null, readBytes 
             returns -1.</para>
            
             <para>If the byte array field value is empty, readBytes 
             returns 0.</para>
             
             <para>Once the first readBytes call on a byte[]
             field value has been made,
             the full value of the field must be read before it is valid to read 
             the next field. An attempt to read the next field before that has 
             been done will throw a MessageFormatException.</para>
             
             <para>To read the byte field value into a new byte[] object, 
             use the readObject method.</para>
             </summary>
            
             <param name="value">the buffer into which the data is read</param>
            
             <returns>the total number of bytes read into the buffer, or -1 if 
             there is no more data because the end of the byte field has been 
             reached</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageEOFException">if unexpected end of message stream has
                                            been reached.</exception>     
             <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
             
             <seealso cref="M:Kaazing.JMS.IStreamMessage.ReadObject"/>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.ReadObject">
             <summary>
             Reads an object from the stream message.
            
             <para>This method can be used to return, in objectified format,
             an object  that has 
             been written to the stream with the equivalent
             writeObject method call, or its equivalent primitive
             write<I>type</I> method.</para>
              
             <para>Note that byte values are returned as byte[], not 
             Byte[].</para>
            
             <para>An attempt to call readObject to read a byte field 
             value into a new byte[] object before the full value of the
             byte field has been read will throw a 
             MessageFormatException.</para>
             </summary>
            
             <returns>a object from the stream message, in objectified
             format (for example, if the object was written as an int, 
             an Integer is returned)</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to read the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageEOFException">if unexpected end of message stream has
                                            been reached.</exception>     
             <exception cref="T:Kaazing.JMS.MessageFormatException">if this type conversion is invalid.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotReadableException">if the message is in write-only 
                                                    mode.</exception>
             
             <seealso cref="!:ReadObjecteadBytes(byte[] value)"/>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.WriteBoolean(System.Boolean)">
             <summary>
             Writes a boolean to the stream message.
             The value true is written as the value 
             (byte)1; the value false is written as 
             the value (byte)0.
             </summary>
            
             <param name="value">the boolean value to be written</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.WriteByte(System.Byte)">
             <summary>
             Writes a byte to the stream message.
             </summary>
            
             <param name="value">the byte value to be written</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.WriteShort(System.Int16)">
             <summary>
             Writes a short to the stream message.
             </summary>
            
             <param name="value">the short value to be written</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.WriteChar(System.Char)">
             <summary>
             Writes a char to the stream message.
             </summary>
            
             <param name="value">the char value to be written</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.WriteInt(System.Int32)">
             <summary>
             Writes an int to the stream message.
             </summary>
            
             <param name="value">the int value to be written</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.WriteLong(System.Int64)">
             <summary>
             Writes a long to the stream message.
             </summary>
            
             <param name="value">the long value to be written</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.WriteFloat(System.Single)">
             <summary>
             Writes a float to the stream message.
             </summary>
            
             <param name="value">the float value to be written</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.WriteDouble(System.Double)">
             <summary>
             Writes a double to the stream message.
             </summary>
            
             <param name="value">the double value to be written</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.WriteString(System.String)">
             <summary>
             Writes a String to the stream message.
             </summary>
            
             <param name="value">the String value to be written</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.WriteBytes(System.Byte[])">
             <summary>
             Writes a byte array field to the stream message.
            
             <para>The byte array value is written to the message
             as a byte array field. Consecutively written byte array fields are 
             treated as two distinct fields when the fields are read.</para>
             </summary>
             
             <param name="value">the byte array value to be written</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.WriteBytes(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Writes a portion of a byte array as a byte array field to the stream 
             message.
              
             <para>The a portion of the byte array value is written to the
             message as a byte array field. Consecutively written byte 
             array fields are treated as two distinct fields when the fields are 
             read.</para>
             </summary>
            
             <param name="value">the byte array value to be written</param>
             <param name="offset">the initial offset within the byte array</param>
             <param name="length">the number of bytes to use</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.WriteObject(System.Object)">
             <summary>
             Writes an object to the stream message.
            
             <para>This method works only for the objectified primitive
             object types (Integer, Double, 
             Long...), String objects, and byte 
             arrays.</para>
             </summary>
            
             <param name="value">the object to be written</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to write the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if the object is invalid.</exception>
             <exception cref="T:Kaazing.JMS.MessageNotWriteableException">if the message is in read-only 
                                                     mode.</exception>
        </member>
        <member name="M:Kaazing.JMS.IStreamMessage.Reset">
            <summary>
            Puts the message body in read-only mode and repositions the stream
            to the beginning.
             
            </summary>
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to reset the message
                                    due to some internal error.</exception>
            <exception cref="T:Kaazing.JMS.MessageFormatException">if the message has an invalid
                                              format.</exception>
        </member>
        <member name="T:Kaazing.JMS.ITemporaryQueue">
             <summary>
             A TemporaryQueue object is a unique Queue object 
             created for the duration of a Connection. It is a 
             system-defined queue that can be consumed only by the 
             Connection that created it.
            
             <para>
             A TemporaryQueue object can be created at either the 
             Session or QueueSession level. Creating it at the
             Session level allows to the TemporaryQueue to 
             participate in transactions with objects from the Pub/Sub  domain. 
             If it is created at the QueueSession, it will only
             be able participate in transactions with objects from the PTP domain.</para>
            
             <seealso cref="M:Kaazing.JMS.ISession.CreateTemporaryQueue"/>
             <seealso cref="M:Kaazing.JMS.IQueueSession.CreateTemporaryQueue"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.ITemporaryQueue.Delete">
            <summary>
            Deletes this temporary queue. If there are existing receivers
            still using it, a JMSException will be thrown.
             
            </summary>
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to delete the 
                                    temporary queue due to some internal error.</exception>
        </member>
        <member name="T:Kaazing.JMS.ITemporaryTopic">
             <summary>
             A TemporaryTopic object is a unique Topic object 
             created for the duration of a Connection. It is a 
             system-defined topic that can be consumed only by the 
             Connection that created it.
            
            <para>A TemporaryTopic object can be created either at the 
             Session or TopicSession level. Creating it at the
             Session level allows the TemporaryTopic to participate
             in the same transaction with objects from the PTP domain. 
             If a TemporaryTopic is  created at the 
             TopicSession, it will only
             be able participate in transactions with objects from the Pub/Sub domain.</para>
            
            
             <seealso cref="M:Kaazing.JMS.ISession.CreateTemporaryTopic"/>
             <seealso cref="M:Kaazing.JMS.ITopicSession.CreateTemporaryTopic"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.ITemporaryTopic.Delete">
            <summary>
            Deletes this temporary topic. If there are existing subscribers
            still using it, a JMSException will be thrown.
             
            </summary>
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to delete the
                                    temporary topic due to some internal error.</exception>
        </member>
        <member name="T:Kaazing.JMS.ITextMessage">
             <summary>
             A TextMessage object is used to send a message containing a 
             java.lang.String.
             It inherits from the Message interface and adds a text message 
             body.
            
             <para>This message type can be used to transport text-based messages, including
              those with XML content.</para>
            
             <para>When a client receives a TextMessage, it is in read-only 
             mode. If a client attempts to write to the message at this point, a 
             MessageNotWriteableException is thrown. If 
             clearBody is 
             called, the message can now be both read from and written to.</para>
            
            
             <seealso cref="M:Kaazing.JMS.ISession.CreateTextMessage"/>
             <seealso cref="M:Kaazing.JMS.ISession.CreateTextMessage(System.String)"/>
             <seealso cref="T:Kaazing.JMS.IBytesMessage"/>
             <seealso cref="T:Kaazing.JMS.IMapMessage"/>
             <seealso cref="T:Kaazing.JMS.IMessage"/>
             <seealso cref="T:Kaazing.JMS.IObjectMessage"/>
             <seealso cref="T:Kaazing.JMS.IStreamMessage"/>
             <seealso cref="!:java.lang.String"/>
             </summary>
        </member>
        <member name="P:Kaazing.JMS.ITextMessage.Text">
            <summary>
            <para>Gets the string containing this message's data.  The default
            value is null.</para>
            </summary>
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the text due to
                                    some internal error.</exception>
             
            <returns>the String containing the message's data</returns>
             
        </member>
        <member name="M:Kaazing.JMS.Stomp.GenericTextMessageImpl.#ctor">
            <summary>
            Creates a new TextMessage
            </summary>
        </member>
        <member name="M:Kaazing.JMS.Stomp.GenericTextMessageImpl.#ctor(Kaazing.JMS.Stomp.IGenericAcknowledgementListener)">
            <summary>
            Creates a new TextMessage ready for writing
            </summary>
        </member>
        <member name="M:Kaazing.JMS.Stomp.GenericTextMessageImpl.#ctor(System.String,Kaazing.JMS.Stomp.IGenericAcknowledgementListener)">
            <summary>
            Creates a new TextMessage filled with data, ready for reading
            </summary>
        </member>
        <member name="T:Kaazing.JMS.ITopicSubscriber">
             <summary>
             A client uses a TopicSubscriber object to receive messages that
             have been published to a topic. A TopicSubscriber object is the
             publish/subscribe form of a message consumer. A MessageConsumer
             can be created by using Session.createConsumer. 
            
             <para>A TopicSession allows the creation of multiple 
             TopicSubscriber objects per topic.  It will deliver each 
             message for a topic to each
             subscriber eligible to receive it. Each copy of the message
             is treated as a completely separate message. Work done on one copy has
             no effect on the others; acknowledging one does not acknowledge the
             others; one message may be delivered immediately, while another waits
             for its subscriber to process messages ahead of it.</para>
            
             <para>Regular TopicSubscriber objects are not durable. They 
             receive only messages that are published while they are active.</para>
            
             <para>Messages filtered out by a subscriber's message selector will never 
             be delivered to the subscriber. From the subscriber's perspective, they 
             do not exist.</para>
            
             <para>In some cases, a connection may both publish and subscribe to a topic.
             The subscriber NoLocal attribute allows a subscriber to inhibit
             the 
             delivery of messages published by its own connection.</para>
            
             <para>If a client needs to receive all the messages published on a topic, 
             including the ones published while the subscriber is inactive, it uses 
             a durable TopicSubscriber. The JMS provider retains a record of
             this durable 
             subscription and insures that all messages from the topic's publishers 
             are retained until they are acknowledged by this durable 
             subscriber or they have expired.</para>
            
             <para>Sessions with durable subscribers must always provide the same client 
             identifier. In addition, each client must specify a name that uniquely 
             identifies (within client identifier) each durable subscription it creates.
             Only one session at a time can have a TopicSubscriber for a 
             particular durable subscription. </para>
            
             <para>A client can change an existing durable subscription by creating a 
             durable TopicSubscriber with the same name and a new topic 
             and/or message 
             selector. Changing a durable subscription is equivalent to unsubscribing 
             (deleting) the old one and creating a new one.</para>
            
             <para>The unsubscribe method is used to delete a durable 
             subscription. The unsubscribe method can be used at the 
             Session or TopicSession level.
             This method deletes the state being 
             maintained on behalf of the subscriber by its provider.</para>
            
             <para>Creating a MessageConsumer provides the same features as
             creating a TopicSubscriber. To create a durable subscriber, 
             use of Session.CreateDurableSubscriber is recommended. The 
             TopicSubscriber is provided to support existing code.</para>
             
             
            
             <seealso cref="M:Kaazing.JMS.ISession.CreateConsumer(Kaazing.JMS.IDestination)"/>
             <seealso cref="M:Kaazing.JMS.ISession.CreateDurableSubscriber(Kaazing.JMS.ITopic,System.String)"/>
             <seealso cref="T:Kaazing.JMS.ITopicSession"/>
             <seealso cref="M:Kaazing.JMS.ITopicSession.CreateSubscriber(Kaazing.JMS.ITopic)"/>
             <seealso cref="T:Kaazing.JMS.IMessageConsumer"/>
             </summary>
        </member>
        <member name="P:Kaazing.JMS.ITopicSubscriber.Topic">
            <summary>
            Gets the Topic associated with this subscriber.
            </summary>
             
            <returns>this subscriber's Topic</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the topic for
                                    this topic subscriber
                                    due to some internal error.</exception>
        </member>
        <member name="P:Kaazing.JMS.ITopicSubscriber.NoLocal">
            <summary>
            Gets the NoLocal attribute for this subscriber. 
            The default value for this attribute is false.
            </summary>
             
            <returns>true if locally published messages are being inhibited</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the
                                    NoLocal attribute for
                                    this topic subscriber
                                    due to some internal error.</exception>
        </member>
        <member name="T:Kaazing.JMS.IQueueBrowser">
             <summary>
             A client uses a QueueBrowser object to look at messages on a 
             queue without removing them.
            
             <para>The getEnumeration method returns a 
             java.util.Enumeration that is used to scan 
             the queue's messages. It may be an enumeration of the entire content of a 
             queue, or it may contain only the messages matching a message selector.</para>
            
             <para>Messages may be arriving and expiring while the scan is done. The JMS API
             does 
             not require the content of an enumeration to be a static snapshot of queue 
             content. Whether these changes are visible or not depends on the JMS 
             provider.</para>
            
            <para>A QueueBrowser can be created from either a 
             Session or a  QueueSession. </para>
            
            
              <seealso cref="M:Kaazing.JMS.ISession.CreateBrowser(Kaazing.JMS.IQueue)"/>
             <seealso cref="!:Kaazing.JMS.IQueueSession.CreateBrowserreateBrowser"/>
             <seealso cref="T:Kaazing.JMS.IQueueReceiver"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.IQueueBrowser.Close">
             <summary>
             Closes the QueueBrowser.
            
             <para>Since a provider may allocate some resources on behalf of a 
             QueueBrowser outside the Java virtual machine, clients should close them
             when they 
             are not needed. Relying on garbage collection to eventually reclaim 
             these resources may not be timely enough.</para>
            
             </summary>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to close this
                                     browser due to some internal error.</exception>
        </member>
        <member name="P:Kaazing.JMS.IQueueBrowser.Queue">
            <summary>
            Gets the queue associated with this queue browser.
            </summary>
            
            <returns>the queue</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the
                                    queue associated with this browser
                                    due to some internal error.</exception>
        </member>
        <member name="P:Kaazing.JMS.IQueueBrowser.MessageSelector">
             <summary>
             Gets this queue browser's message selector expression.
             </summary>
              
             <returns>this queue browser's message selector, or null if no
                     message selector exists for the message consumer (that is, if 
                     the message selector was not set or was set to null or the 
                     empty string)</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the
                                     message selector for this browser
                                     due to some internal error.</exception>
        </member>
        <member name="P:Kaazing.JMS.IQueueBrowser.Enumeration">
             <summary>
             Gets an enumeration for browsing the current queue messages in the
             order they would be received.
             </summary>
            
             <returns>an enumeration for browsing the messages</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the
                                     enumeration for this browser
                                     due to some internal error.</exception>
        </member>
        <member name="T:Kaazing.JMS.Stomp.NotConnectedException">
            <summary>
            Exception raised when an operation could not complete because the Connection was not established
            </summary>
        </member>
        <member name="M:Kaazing.JMS.Stomp.NotConnectedException.#ctor(System.String)">
            <summary>
            Exception raised when an operation could not complete because the Connection was not established
            </summary>
            <param name="reason">for the exception</param>
        </member>
        <member name="T:Kaazing.JMS.Stomp.ReconnectFailedException">
            <summary>
            Exception thrown when a reconnect was attempted but failed
            </summary>
        </member>
        <member name="M:Kaazing.JMS.Stomp.ReconnectFailedException.#ctor(System.String)">
            <summary>
            Exception thrown when a reconnect was attempted but failed
            </summary>
            <param name="reason">for the exception</param>
        </member>
        <member name="T:Kaazing.JMS.IConnection">
             <summary>
             A IConnection object is a client's active connection to its JMS 
             provider.
            
             <para>Connections support concurrent use.</para>
            
             <para>A connection serves several purposes:
            
             <list type="bullet">
               <item>It encapsulates an open connection with a JMS provider. It 
                   typically represents an open TCP/IP socket between a client and 
                   the service provider software.</item>
               <item>Its creation is where client authentication takes place.</item>
               <item>It can specify a unique client identifier.</item>
               <item>It provides a IConnectionMetaData object.</item>
               <item>It supports an optional IExceptionListener object.</item>
             </list></para>
            
             <para>Because the creation of a connection involves setting up authentication 
             and communication, a connection is a relatively heavyweight 
             object. Most clients will do all their messaging with a single connection.
             Other more advanced applications may use several connections. The JMS API
             does 
             not architect a reason for using multiple connections; however, there may 
             be operational reasons for doing so.</para>
            
             <para>A JMS client typically creates a connection, one or more sessions, 
             and a number of message producers and consumers. When a connection is
             created, it is in stopped mode. That means that no messages are being
             delivered.</para>
            
             <para>It is typical to leave the connection in stopped mode until setup 
             is complete (that is, until all message consumers have been 
             created).  At that point, the client calls 
             the connection's start method, and messages begin arriving at 
             the connection's consumers. This setup
             convention minimizes any client confusion that may result from 
             asynchronous message delivery while the client is still in the process 
             of setting itself up.</para>
            
             <para>A connection can be started immediately, and the setup can be done 
             afterwards. Clients that do this must be prepared to handle asynchronous 
             message delivery while they are still in the process of setting up.</para>
            
             <para>A message producer can send messages while a connection is stopped.</para>
            
            
             <seealso cref="T:Kaazing.JMS.IConnectionFactory"/>
             <seealso cref="T:Kaazing.JMS.IQueueConnection"/>
             <seealso cref="T:Kaazing.JMS.ITopicConnection"/>
             <seealso cref="T:Kaazing.JMS.Stomp.StompConnectionFactory"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.IConnection.CreateSession(System.Boolean,System.Int32)">
             <summary>
             Creates a Session object.
              
             </summary> 
             <param name="transacted">indicates whether the session is transacted</param>
             <param name="acknowledgeMode">indicates whether the consumer or the
             client will acknowledge any messages it receives; ignored if the session
             is transacted. Legal values are Session.AUTO_ACKNOWLEDGE, 
             Session.CLIENT_ACKNOWLEDGE, and 
             Session.DUPS_OK_ACKNOWLEDGE.</param>
              
             <returns>a newly created  session</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the Connection object fails
                                     to create a session due to some internal error or
                                     lack of support for the specific transaction
                                     and acknowledgement mode.</exception>
            
             <seealso cref="F:Kaazing.JMS.SessionConstants.AUTO_ACKNOWLEDGE"/>
             <seealso cref="F:Kaazing.JMS.SessionConstants.CLIENT_ACKNOWLEDGE"/>
             <seealso cref="F:Kaazing.JMS.SessionConstants.DUPS_OK_ACKNOWLEDGE"/>
        </member>
        <member name="M:Kaazing.JMS.IConnection.Start">
             <summary>
             Starts (or restarts) a connection's delivery of incoming messages.
             A call to start on a connection that has already been
             started is ignored.
             
             </summary> 
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to start
                                     message delivery due to some internal error.</exception>
            
             <seealso cref="M:Kaazing.JMS.IConnection.Stop"/>
        </member>
        <member name="M:Kaazing.JMS.IConnection.Stop">
             <summary>
             Temporarily stops a connection's delivery of incoming messages.
             Delivery can be restarted using the connection's start
             method. When the connection is stopped,
             delivery to all the connection's message consumers is inhibited:
             synchronous receives block, and messages are not delivered to message
             listeners.
            
             <para>This call blocks until receives and/or message listeners in progress
             have completed.</para>
            
             <para>Stopping a connection has no effect on its ability to send messages.
             A call to stop on a connection that has already been
             stopped is ignored.</para>
            
             <para>A call to stop must not return until delivery of messages
             has paused. This means that a client can rely on the fact that none of 
             its message listeners will be called and that all threads of control 
             waiting for receive calls to return will not return with a 
             message until the
             connection is restarted. The receive timers for a stopped connection
             continue to advance, so receives may time out while the connection is
             stopped.</para>
             
             <para>If message listeners are running when stop is invoked, 
             the stop call must
             wait until all of them have returned before it may return. While these
             message listeners are completing, they must have the full services of the
             connection available to them.</para>
              
             </summary> 
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to stop
                                     message delivery due to some internal error.</exception>
            
             <seealso cref="M:Kaazing.JMS.IConnection.Start"/>
        </member>
        <member name="M:Kaazing.JMS.IConnection.Close">
             <summary>
             Closes the connection.
            
             <para>Since a provider typically allocates significant resources outside 
             the JVM on behalf of a connection, clients should close these resources
             when they are not needed. Relying on garbage collection to eventually 
             reclaim these resources may not be timely enough.</para>
            
             <para>There is no need to close the sessions, producers, and consumers
             of a closed connection.</para>
            
             <para>Closing a connection causes all temporary destinations to be
             deleted.</para>
            
             <para>When this method is invoked, it should not return until message
             processing has been shut down in an orderly fashion. This means that all
             message 
             listeners that may have been running have returned, and that all pending 
             receives have returned. A close terminates all pending message receives 
             on the connection's sessions' consumers. The receives may return with a 
             message or with null, depending on whether there was a message available 
             at the time of the close. If one or more of the connection's sessions' 
             message listeners is processing a message at the time when connection 
             close is invoked, all the facilities of the connection and 
             its sessions must remain available to those listeners until they return 
             control to the JMS provider. </para>
            
             <para>Closing a connection causes any of its sessions' transactions
             in progress to be rolled back. In the case where a session's
             work is coordinated by an external transaction manager, a session's 
             commit and rollback methods are
             not used and the result of a closed session's work is determined
             later by the transaction manager.</para>
            
             <para>Closing a connection does NOT force an 
             acknowledgment of client-acknowledged sessions.</para>
             
             <para>Invoking the acknowledge method of a received message 
             from a closed connection's session must throw an 
             IllegalStateException.  Closing a closed connection must 
             NOT throw an exception.</para>
              
             </summary> 
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to close the
                                     connection due to some internal error. For 
                                     example, a failure to release resources
                                     or to close a socket connection can cause
                                     this exception to be thrown.</exception>
            
        </member>
        <member name="M:Kaazing.JMS.IConnection.CreateConnectionConsumer(Kaazing.JMS.IDestination,System.String,Kaazing.JMS.IServerSessionPool,System.Int32)">
             <summary>
             Creates a connection consumer for this connection (optional operation).
             This is an expert facility not used by regular JMS clients.
              
             </summary> 
             <param name="destination">the destination to access</param>
             <param name="messageSelector">only messages with properties matching the
             message selector expression are delivered.  A value of null or
             an empty string indicates that there is no message selector  
             for the message consumer.</param>
             <param name="sessionPool">the server session pool to associate with this 
             connection consumer</param>
             <param name="maxMessages">the maximum number of messages that can be
             assigned to a server session at one time</param>
            
             <returns>the connection consumer</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the Connection object fails
                                     to create a connection consumer due to some
                                     internal error or invalid arguments for 
                                     sessionPool and 
                                     messageSelector.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid destination is specified.</exception>
             <exception cref="T:Kaazing.JMS.InvalidSelectorException">if the message selector is invalid.</exception>
            
             <seealso cref="T:Kaazing.JMS.IConnectionConsumer"/>
        </member>
        <member name="M:Kaazing.JMS.IConnection.CreateDurableConnectionConsumer(Kaazing.JMS.ITopic,System.String,System.String,Kaazing.JMS.IServerSessionPool,System.Int32)">
             <summary>
             Create a durable connection consumer for this connection (optional operation). 
             This is an expert facility not used by regular JMS clients.
                            
             </summary> 
             <param name="topic">topic to access</param>
             <param name="subscriptionName">durable subscription name</param>
             <param name="messageSelector">only messages with properties matching the
             message selector expression are delivered.  A value of null or
             an empty string indicates that there is no message selector 
             for the message consumer.</param>
             <param name="sessionPool">the server session pool to associate with this 
             durable connection consumer</param>
             <param name="maxMessages">the maximum number of messages that can be
             assigned to a server session at one time</param>
            
             <returns>the durable connection consumer</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the Connection object fails
                                     to create a connection consumer due to some
                                     internal error or invalid arguments for 
                                     sessionPool and 
                                     messageSelector.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid destination
                         is specified.</exception>
             <exception cref="T:Kaazing.JMS.InvalidSelectorException">if the message selector is invalid.</exception>
             <seealso cref="T:Kaazing.JMS.IConnectionConsumer"/>
        </member>
        <member name="P:Kaazing.JMS.IConnection.ClientID">
             <summary>
             Gets the client identifier for this connection.
             </summary> 
              
             <para>This value is specific to the JMS provider.  It is either preconfigured 
             by an administrator in a ConnectionFactory object
             or assigned dynamically by the application by calling the
             setClientID method.</para>
             
             
             <returns>the unique client identifier</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to return
                                     the client ID for this connection due
                                     to some internal error.</exception>
            
             <summary>
             <para>Sets the client identifier for this connection.</para>
              
             <para>The preferred way to assign a JMS client's client identifier is for
             it to be configured in a client-specific ConnectionFactory
             object and transparently assigned to the Connection object
             it creates.</para>
             
             <para>Alternatively, a client can set a connection's client identifier
             using a provider-specific value. The facility to set a connection's
             client identifier explicitly is not a mechanism for overriding the
             identifier that has been administratively configured. It is provided
             for the case where no administratively specified identifier exists.
             If one does exist, an attempt to change it by setting it must throw an
             IllegalStateException. If a client sets the client identifier
             explicitly, it must do so immediately after it creates the connection 
             and before any other
             action on the connection is taken. After this point, setting the
             client identifier is a programming error that should throw an
             IllegalStateException.</para>
            
             <para>The purpose of the client identifier is to associate a connection and
             its objects with a state maintained on behalf of the client by a 
             provider. The only such state identified by the JMS API is that required
             to support durable subscriptions.</para>
            
             <para>If another connection with the same clientID is already running when
             this method is called, the JMS provider should detect the duplicate ID and throw
             an InvalidClientIDException.</para>
            
             </summary> 
             <param name="clientID">the unique client identifier</param>
             
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to
                                     set the client ID for this connection due
                                     to some internal error.</exception>
            
             <exception cref="T:Kaazing.JMS.InvalidClientIDException">if the JMS client specifies an
                                     invalid or duplicate client ID.</exception>
             <exception cref="T:Kaazing.JMS.IllegalStateException">if the JMS client attempts to set
                   a connection's client ID at the wrong time or
                   when it has been administratively configured.</exception>
        </member>
        <member name="P:Kaazing.JMS.IConnection.MetaData">
             <summary>
             Gets the metadata for this connection.
              
             </summary> 
             <returns>the connection metadata</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to
                                     get the connection metadata for this connection.</exception>
            
             <seealso cref="T:Kaazing.JMS.IConnectionMetaData"/>
        </member>
        <member name="P:Kaazing.JMS.IConnection.ExceptionListener">
             <summary>
             Gets the ExceptionListener object for this connection. 
             Not every Connection has an ExceptionListener
             associated with it.
            
             </summary> 
             <returns>the ExceptionListener for this connection, or null. 
                          if no ExceptionListener is associated
                          with this connection.</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to
                                     get the ExceptionListener for this 
                                     connection. </exception>
             <seealso cref="P:Kaazing.JMS.IConnection.ExceptionListener"/>
             <summary>
             <para>Sets an exception listener for this connection.</para>
            
             <para>If a JMS provider detects a serious problem with a connection, it
             informs the connection's ExceptionListener, if one has been
             registered. It does this by calling the listener's
             onException method, passing it a JMSException
             object describing the problem.</para>
            
             <para>An exception listener allows a client to be notified of a problem
             asynchronously.
             Some connections only consume messages, so they would have no other 
             way to learn their connection has failed.</para>
            
             <para>A connection serializes execution of its
             ExceptionListener.</para>
            
             <para>A JMS provider should attempt to resolve connection problems 
             itself before it notifies the client of them.</para>
            
             </summary> 
             <param name="listener">the exception listener</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to
                                     set the exception listener for this connection.</exception>
            
        </member>
        <member name="T:Kaazing.JMS.Stomp.StompConnectionFactory">
            <summary>
            JMS Client implementation of ConnectionFactory.  Used to create a connection
            with a JMS provider via a WebSocket connection.
            Also provides the ability to set the Gateway location dynamically
            </summary>
        </member>
        <member name="T:Kaazing.JMS.IConnectionFactory">
             <summary>
             A IConnectionFactory object encapsulates a set of connection 
             configuration 
             parameters that has been defined by an administrator. A client uses 
             it to create a connection with a JMS provider.
            
             <para>A IConnectionFactory object is a JMS administered object and
              supports concurrent use.</para>
            
             <para>JMS administered objects are objects containing configuration 
             information that are created by an administrator and later used by 
             JMS clients. They make it practical to administer the JMS API in the 
             enterprise.</para>
            
             <para>Clients should think of administered objects as local objects. 
             Looking them up should not have any hidden side effects or use surprising 
             amounts of local resources.</para>
            
             <seealso cref="T:Kaazing.JMS.IConnection"/>
             <seealso cref="T:Kaazing.JMS.IQueueConnectionFactory"/>
             <seealso cref="T:Kaazing.JMS.ITopicConnectionFactory"/>
             <seealso cref="T:Kaazing.JMS.Stomp.StompConnectionFactory"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.IConnectionFactory.CreateConnection">
             <summary>
             Creates a connection with the default user identity.
             The connection is created in stopped mode. No messages 
             will be delivered until the IConnection.Start method
             is explicitly called.
             </summary>
            
             <returns>a newly created connection</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to create the
                                     connection due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.JMSSecurityException">if client authentication fails due to 
                                     an invalid user name or password.</exception>
        </member>
        <member name="M:Kaazing.JMS.IConnectionFactory.CreateConnection(System.String,System.String)">
            <summary>
            Creates a connection with the specified user identity.
            The connection is created in stopped mode. No messages 
            will be delivered until the IConnection.Start method
            is explicitly called.
             
            </summary>
            <returns>a newly created  connection</returns>
            <param name="userName">the caller's user name</param>
            <param name="password">the caller's password</param>
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to create the 
                                    connection due to some internal error.</exception>
            <exception cref="T:Kaazing.JMS.JMSSecurityException">if client authentication fails due to 
                                    an invalid user name or password.</exception>
        </member>
        <member name="M:Kaazing.JMS.Stomp.StompConnectionFactory.#ctor">
            <summary>
            Creates a new JMSConnectionFactory to create connections.  The target Gateway location
            must be set subsequently using <I>setGatewayLocation()</I>.
            </summary>
        </member>
        <member name="M:Kaazing.JMS.Stomp.StompConnectionFactory.#ctor(System.Uri)">
            <summary>
            Creates a new JMSConnectionFactory to create connections to the target <I>url</I> specified.
            A WebSocket is used to establish the connection.  The url should specify a protocol such as
            <B>ws:</B> or <B>wss:</B>.  For example: <B>ws://localhost:8000/jms</B>
            </summary>
        </member>
        <member name="M:Kaazing.JMS.Stomp.StompConnectionFactory.#ctor(System.Uri,Kaazing.JMS.Stomp.StompConnectionProperties)">
            <summary>
            Creates a new JMSConnectionFactory to create connections to the target <I>url</I> specified.
            A WebSocket is used to establish the connection.  The url should specify a protocol such as
            <B>ws:</B> or <B>wss:</B>.  For example: <B>ws://localhost:8000/jms</B>
            </summary>
        </member>
        <member name="M:Kaazing.JMS.Stomp.StompConnectionFactory.CreateConnection">
            <summary>
            Creates a JMS Connection via WebSocket, using the default username and password
            to authenticate with the Gateway.
            </summary>
        </member>
        <member name="M:Kaazing.JMS.Stomp.StompConnectionFactory.CreateConnection(System.String,System.String)">
            <summary>
            Creates a JMS Connection via WebSocket, using the <I>username</I> and <I>password</I>
            specified as credentials to authenticate with the Gateway.
            </summary>
        </member>
        <member name="P:Kaazing.JMS.Stomp.StompConnectionFactory.GatewayLocation">
            <summary>
            Gets/Sets the target Gateway location.
            </summary>
            <remarks>
            A WebSocket is used to establish the connection.  The url should specify a protocol such as
            <B>ws:</B> or <B>wss:</B>.  For example: <B>ws://localhost:8000/jms</B>
            </remarks>
        </member>
        <member name="P:Kaazing.JMS.Stomp.StompConnectionFactory.ChannelFactory">
            <summary>
            Sets the channel factory used for connections.
            </summary>
        </member>
        <member name="T:Kaazing.JMS.Stomp.StompConnectionProperties">
            <summary>
            Various Stomp connection properties
            </summary>
        </member>
        <member name="F:Kaazing.JMS.Stomp.StompConnectionProperties._connectionTimeout">
            <summary>
            Time to wait on initial connection before closing in milliseconds (default 5000ms). 
             Set to 0 for no timeout (wait indefinitely for connection)
            </summary>
        </member>
        <member name="F:Kaazing.JMS.Stomp.StompConnectionProperties._shutdownDelay">
            <summary>
            Time to wait for server to close socket after sending DISCONNECT before closing in milliseconds (default 5000ms)
            </summary>
        </member>
        <member name="F:Kaazing.JMS.Stomp.StompConnectionProperties._reconnectDelay">
            <summary>
            Time to wait between reconnect attempts in milliseconds (default  3000ms)
            </summary>
        </member>
        <member name="F:Kaazing.JMS.Stomp.StompConnectionProperties._reconnectAttemptsMax">
            <summary>
            Maximum number of reconnect attempts (default to infinite retries).  Set to -1 for infinite.
            </summary>
        </member>
        <member name="T:Kaazing.JMS.Stomp.TransactionNotCommittedException">
            <summary>
            Exception raised when a JMS Transaction has reported back as committed prior to connection close.
            It is possible that the transaction was committed by the broker, but a network interruption
            caused the receipt to be lost in flight.
            </summary>
        </member>
        <member name="M:Kaazing.JMS.Stomp.TransactionNotCommittedException.#ctor(System.String)">
            <summary>
            Exception raised when a JMS Transaction has reported back as committed prior to connection close.
            It is possible that the transaction was committed by the broker, but a network interruption
            caused the receipt to be lost in flight.
            </summary>
            <param name="reason">for the exception</param>
        </member>
        <member name="T:Kaazing.JMS.Stomp.TransactionRolledBackException">
            <summary>
            Exception raised when a JMS Transaction is rolled back due to an error
            </summary>
        </member>
        <member name="M:Kaazing.JMS.Stomp.TransactionRolledBackException.#ctor(System.String)">
            <summary>
            Exception raised when a JMS Transaction is rolled back due to an error
            </summary>
            <param name="reason">for the exception</param>
        </member>
        <member name="T:Kaazing.JMS.Util.ISerializable">
            <summary>
            The ISerializable inteface from .NET version 4 is not available in the Portable Class Library (PCL).
            This is a cover for its functionality.
            </summary>
        </member>
        <member name="T:Kaazing.JMS.Util.Tracer">
            <summary>
            Simple class that offers logging and tracing.
            </summary>
        </member>
        <member name="F:Kaazing.JMS.Util.Tracer._console">
            <summary>
            The default <c>Console</c>.
            </summary>
        </member>
        <member name="M:Kaazing.JMS.Util.Tracer.Trace(System.String)">
            <summary>
            Writes out a given <c>String</c> to the default implementation of the <c>Console</c> interface.
            </summary>
            <param name="msg">the message to write out</param>
        </member>
        <member name="T:Kaazing.JMS.Util.Console">
            <summary>
            Provides functionality to write out a given <c>String</c> object.
            </summary>
        </member>
        <member name="M:Kaazing.JMS.Util.Console.WriteLine(System.String)">
            <summary>
            Writes out a given <c>String</c>.
            </summary>
            <param name="msg">the message to write out</param>
        </member>
        <member name="T:Kaazing.JMS.DeliveryModeConstants">
             <summary>
             The delivery modes supported by the JMS API are PERSISTENT and
             NON_PERSISTENT.
            
             <para>A client marks a message as persistent if it feels that the 
             application will have problems if the message is lost in transit.
             A client marks a message as non-persistent if an occasional
             lost message is tolerable. Clients use delivery mode to tell a
             JMS provider how to balance message transport reliability with throughput.</para>
            
             <para>Delivery mode covers only the transport of the message to its 
             destination. Retention of a message at the destination until
             its receipt is acknowledged is not guaranteed by a PERSISTENT 
             delivery mode. Clients should assume that message retention 
             policies are set administratively. Message retention policy
             governs the reliability of message delivery from destination
             to message consumer. For example, if a client's message storage 
             space is exhausted, some messages may be dropped in accordance with 
             a site-specific message retention policy.</para>
            
             <para>A message is guaranteed to be delivered once and only once
             by a JMS provider if the delivery mode of the message is 
             PERSISTENT 
             and if the destination has a sufficient message retention policy.</para>
            
            
            
             </summary>
        </member>
        <member name="F:Kaazing.JMS.DeliveryModeConstants.NON_PERSISTENT">
             <summary>
             This is the lowest-overhead delivery mode because it does not require 
             that the message be logged to stable storage. The level of JMS provider
             failure that causes a NON_PERSISTENT message to be lost is 
             not defined.
            
             <para>A JMS provider must deliver a NON_PERSISTENT message 
             with an 
             at-most-once guarantee. This means that it may lose the message, but it 
             must not deliver it twice.</para>
             </summary>
        </member>
        <member name="F:Kaazing.JMS.DeliveryModeConstants.PERSISTENT">
            <summary>
            This delivery mode instructs the JMS provider to log the message to stable 
            storage as part of the client's send operation. Only a hard media 
            failure should cause a PERSISTENT message to be lost.
            </summary>
        </member>
        <member name="T:Kaazing.JMS.IConnectionConsumer">
             <summary>
             For application servers, IConnection objects provide a special 
             facility 
             for creating a IConnectionConsumer (optional). The messages it 
             is to consume are 
             specified by a Destination and a message selector. In addition,
             a IConnectionConsumer must be given a 
             IServerSessionPool to use for 
             processing its messages.
            
             <para>Normally, when traffic is light, a IConnectionConsumer gets a
             IServerSession from its pool, loads it with a single message, and
             starts it. As traffic picks up, messages can back up. If this happens, 
             a IConnectionConsumer can load each ServerSession
             with more than one 
             message. This reduces the thread context switches and minimizes resource 
             use at the expense of some serialization of message processing.</para>
            
            
             <seealso cref="M:Kaazing.JMS.IConnection.CreateConnectionConsumer(Kaazing.JMS.IDestination,System.String,Kaazing.JMS.IServerSessionPool,System.Int32)"/>
             <seealso cref="M:Kaazing.JMS.IConnection.CreateDurableConnectionConsumer(Kaazing.JMS.ITopic,System.String,System.String,Kaazing.JMS.IServerSessionPool,System.Int32)"/>
             <seealso cref="M:Kaazing.JMS.IQueueConnection.CreateConnectionConsumer(Kaazing.JMS.IQueue,System.String,Kaazing.JMS.IServerSessionPool,System.Int32)"/>
             <seealso cref="M:Kaazing.JMS.ITopicConnection.CreateConnectionConsumer(Kaazing.JMS.ITopic,System.String,Kaazing.JMS.IServerSessionPool,System.Int32)"/>
             <seealso cref="M:Kaazing.JMS.ITopicConnection.CreateDurableConnectionConsumer(Kaazing.JMS.ITopic,System.String,System.String,Kaazing.JMS.IServerSessionPool,System.Int32)"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.IConnectionConsumer.Close">
             <summary>
             Closes the connection consumer.
            
             <para>Since a provider may allocate some resources on behalf of a 
             connection consumer outside the Java virtual machine, clients should 
             close these resources when
             they are not needed. Relying on garbage collection to eventually 
             reclaim these resources may not be timely enough.</para>
              
             </summary>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to release resources 
                                     on behalf of the connection consumer or fails
                                     to close the connection consumer.</exception>
        </member>
        <member name="P:Kaazing.JMS.IConnectionConsumer.ServerSessionPool">
            <summary>
            Gets the server session pool associated with this connection consumer.
            </summary>
             
            <returns>the server session pool used by this connection consumer</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the server 
                                    session pool associated with this consumer due
                                    to some internal error.</exception>
        </member>
        <member name="T:Kaazing.JMS.IllegalStateException">
             <summary>
            
             <para> This exception is thrown when a method is 
                 invoked at an illegal or inappropriate time or if the provider is 
                 not in an appropriate state for the requested operation. For example, 
                 this exception must be thrown if Session.commit is 
                 called on a non-transacted session. This exception is also called when
                 a domain inappropriate method is called, such as calling 
                 ITopicSession.CreateQueueBrowser.</para>
            
             </summary>
        </member>
        <member name="M:Kaazing.JMS.IllegalStateException.#ctor(System.String,System.String)">
             <summary>
             Constructs an IllegalStateException with the specified reason
              and error code.
             </summary>
            
              <param name="reason">a description of the exception</param>
              <param name="errorCode">a string specifying the vendor-specific
                                    error code</param>
                                    
        </member>
        <member name="M:Kaazing.JMS.IllegalStateException.#ctor(System.String)">
             <summary>
             Constructs an IllegalStateException with the specified 
              reason. The error code defaults to null.
             </summary>
            
              <param name="reason">a description of the exception</param>
        </member>
        <member name="T:Kaazing.JMS.IMessageListener">
             <summary>
             A MessageListener object is used to receive asynchronously 
             delivered messages.
            
             <para>Each session must insure that it passes messages serially to the
             listener. This means that a listener assigned to one or more consumers
             of the same session can assume that the onMessage method 
             is not called with the next message until the session has completed the 
             last call.</para>
            
             </summary>
        </member>
        <member name="M:Kaazing.JMS.IMessageListener.OnMessage(Kaazing.JMS.IMessage)">
             <summary>
             Passes a message to the listener.
             </summary>
            
             <param name="message">the message passed to the listener</param>
        </member>
        <member name="T:Kaazing.JMS.InvalidClientIDException">
             <summary>
            
             <para> This exception must be thrown when a 
                 client attempts to set a connection's client ID to a value that 
                 is rejected by a provider.</para>
            
             </summary>
        </member>
        <member name="M:Kaazing.JMS.InvalidClientIDException.#ctor(System.String,System.String)">
             <summary>
             Constructs an InvalidClientIDException with the specified 
              reason and error code.
             </summary>
            
              <param name="reason">a description of the exception</param>
              <param name="errorCode">a string specifying the vendor-specific
                                    error code</param>
                                    
        </member>
        <member name="M:Kaazing.JMS.InvalidClientIDException.#ctor(System.String)">
             <summary>
             Constructs an InvalidClientIDException with the specified 
              reason. The error code defaults to null.
             </summary>
            
              <param name="reason">a description of the exception</param>
        </member>
        <member name="T:Kaazing.JMS.InvalidDestinationException">
             <summary>
            
             <para> This exception must be thrown when a 
                 destination either is not understood by a provider or is no 
                 longer valid.</para>
            
             </summary>
        </member>
        <member name="M:Kaazing.JMS.InvalidDestinationException.#ctor(System.String,System.String)">
             <summary>
             Constructs an InvalidDestinationException with the specified 
              reason and error code.
             </summary>
            
              <param name="reason">a description of the exception</param>
              <param name="errorCode">a string specifying the vendor-specific
                                    error code</param>
                                    
        </member>
        <member name="M:Kaazing.JMS.InvalidDestinationException.#ctor(System.String)">
             <summary>
             Constructs an InvalidDestinationException with the specified 
              reason. The error code defaults to null.
             </summary>
            
              <param name="reason">a description of the exception</param>
        </member>
        <member name="T:Kaazing.JMS.InvalidSelectorException">
             <summary>
            
             <para> This exception must be thrown when a 
                 JMS client attempts to give a provider a message selector with 
                 invalid syntax.</para>
            
             </summary>
        </member>
        <member name="M:Kaazing.JMS.InvalidSelectorException.#ctor(System.String,System.String)">
             <summary>
             Constructs an InvalidSelectorException with the specified 
              reason and error code.
             </summary>
            
              <param name="reason">a description of the exception</param>
              <param name="errorCode">a string specifying the vendor-specific
                                    error code</param>
                                    
        </member>
        <member name="M:Kaazing.JMS.InvalidSelectorException.#ctor(System.String)">
             <summary>
             Constructs an InvalidSelectorException with the specified 
              reason. The error code defaults to null.
             </summary>
            
              <param name="reason">a description of the exception</param>
        </member>
        <member name="T:Kaazing.JMS.IQueueConnection">
             <summary>
             A QueueConnection object is an active connection to a 
             point-to-point JMS provider. A client uses a QueueConnection 
             object to create one or more QueueSession objects
             for producing and consuming messages.
            
            <para>A QueueConnection can be used to create a
             QueueSession, from which specialized  queue-related objects
             can be created.
             A more general, and recommended, approach is to use the 
             Connection object.</para>
             
            
             <para>The QueueConnection object
             should be used to support existing code that has already used it.</para>
            
             <para>A QueueConnection cannot be used to create objects 
             specific to the   publish/subscribe domain. The
             createDurableConnectionConsumer method inherits
             from  Connection, but must throw an 
             IllegalStateException
             if used from QueueConnection.</para>
            
            
             <seealso cref="T:Kaazing.JMS.IConnection"/>
             <seealso cref="T:Kaazing.JMS.IConnectionFactory"/>
             <seealso cref="T:Kaazing.JMS.IQueueConnectionFactory"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.IQueueConnection.CreateQueueSession(System.Boolean,System.Int32)">
             <summary>
             Creates a QueueSession object.
             </summary>
              
             <returns>a newly created queue session</returns>
              
              
             <param name="transacted">indicates whether the session is transacted</param>
             <param name="acknowledgeMode">indicates whether the consumer or the
             client will acknowledge any messages it receives; ignored if the session
             is transacted. Legal values are Session.AUTO_ACKNOWLEDGE, 
             Session.CLIENT_ACKNOWLEDGE, and 
             Session.DUPS_OK_ACKNOWLEDGE.</param>
             <exception cref="T:Kaazing.JMS.JMSException">if the QueueConnection object fails
                                     to create a session due to some internal error or
                                     lack of support for the specific transaction
                                     and acknowledgement mode.</exception>
            
             <seealso cref="F:Kaazing.JMS.SessionConstants.AUTO_ACKNOWLEDGE"/>
             <seealso cref="F:Kaazing.JMS.SessionConstants.CLIENT_ACKNOWLEDGE"/>
             <seealso cref="F:Kaazing.JMS.SessionConstants.DUPS_OK_ACKNOWLEDGE"/>
        </member>
        <member name="M:Kaazing.JMS.IQueueConnection.CreateConnectionConsumer(Kaazing.JMS.IQueue,System.String,Kaazing.JMS.IServerSessionPool,System.Int32)">
             <summary>
             Creates a connection consumer for this connection (optional operation).
             This is an expert facility not used by regular JMS clients.
             </summary>
            
             <param name="queue">the queue to access</param>
             <param name="messageSelector">only messages with properties matching the
             message selector expression are delivered. A value of null or
             an empty string indicates that there is no message selector 
             for the message consumer.</param>
             <param name="sessionPool">the server session pool to associate with this 
             connection consumer</param>
             <param name="maxMessages">the maximum number of messages that can be
             assigned to a server session at one time</param>
            
             <returns>the connection consumer</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the QueueConnection object fails
                                     to create a connection consumer due to some
                                     internal error or invalid arguments for 
                                     sessionPool and 
                                     messageSelector.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid queue is specified.</exception>
             <exception cref="T:Kaazing.JMS.InvalidSelectorException">if the message selector is invalid.</exception>
             <seealso cref="T:Kaazing.JMS.IConnectionConsumer"/>
        </member>
        <member name="T:Kaazing.JMS.IQueueConnectionFactory">
             <summary>
             A client uses a QueueConnectionFactory object to create 
             QueueConnection objects with a point-to-point JMS provider.
            
             <para>QueueConnectionFactory can be used to create a 
             QueueConnection, from which specialized queue-related objects
             can be  created. A more general, and recommended,  approach 
             is to use the ConnectionFactory object.</para>
            
            <para> The QueueConnectionFactory object
             can be used to support existing code that already uses it.</para>
            
            
             <seealso cref="T:Kaazing.JMS.IConnectionFactory"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.IQueueConnectionFactory.CreateQueueConnection">
             <summary>
             Creates a queue connection with the default user identity.
             The connection is created in stopped mode. No messages 
             will be delivered until the Connection.start method
             is explicitly called.
             </summary>
            
            
             <returns>a newly created queue connection</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to create the queue 
                                     connection due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.JMSSecurityException">if client authentication fails due to 
                                     an invalid user name or password.</exception>
        </member>
        <member name="M:Kaazing.JMS.IQueueConnectionFactory.CreateQueueConnection(System.String,System.String)">
             <summary>
             Creates a queue connection with the specified user identity.
             The connection is created in stopped mode. No messages 
             will be delivered until the Connection.start method
             is explicitly called.
             </summary>
              
             <param name="userName">the caller's user name</param>
             <param name="password">the caller's password</param>
              
             <returns>a newly created queue connection</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to create the queue 
                                     connection due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.JMSSecurityException">if client authentication fails due to 
                                     an invalid user name or password.</exception>
        </member>
        <member name="T:Kaazing.JMS.IQueueReceiver">
             <summary>
             A client uses a QueueReceiver object to receive messages that 
             have been delivered to a queue.
            
             <para>Although it is possible to have multiple QueueReceivers 
             for the same queue, the JMS API does not define how messages are 
             distributed between the QueueReceivers.</para>
            
             <para>If a QueueReceiver specifies a message selector, the 
             messages that are not selected remain on the queue. By definition, a message
             selector allows a QueueReceiver to skip messages. This 
             means that when the skipped messages are eventually read, the total ordering
             of the reads does not retain the partial order defined by each message 
             producer. Only QueueReceivers without a message selector
             will read messages in message producer order.</para>
            
             <para>Creating a MessageConsumer provides the same features as
             creating a QueueReceiver. A MessageConsumer object is 
             recommended for creating new code. The  QueueReceiver is
             provided to support existing code.</para>
            
            
             <seealso cref="M:Kaazing.JMS.ISession.CreateConsumer(Kaazing.JMS.IDestination,System.String)"/>
             <seealso cref="M:Kaazing.JMS.ISession.CreateConsumer(Kaazing.JMS.IDestination)"/>
             <seealso cref="M:Kaazing.JMS.IQueueSession.CreateReceiver(Kaazing.JMS.IQueue,System.String)"/>
             <seealso cref="M:Kaazing.JMS.IQueueSession.CreateReceiver(Kaazing.JMS.IQueue)"/>
             <seealso cref="T:Kaazing.JMS.IMessageConsumer"/>
             </summary>
        </member>
        <member name="P:Kaazing.JMS.IQueueReceiver.Queue">
            <summary>
            Gets the Queue associated with this queue receiver.
            </summary>
             
            <returns>this receiver's Queue </returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the queue for
                                    this queue receiver
                                    due to some internal error.</exception>
        </member>
        <member name="T:Kaazing.JMS.IQueueSender">
             <summary>
             A client uses a QueueSender object to send messages to a queue.
             
             <para>Normally, the Queue is specified when a 
             QueueSender is created.  In this case, an attempt to use
             the send methods for an unidentified 
             QueueSender will throw a 
             java.lang.UnsupportedOperationException.</para>
             
             <para>If the QueueSender is created with an unidentified 
             Queue, an attempt to use the send methods that 
             assume that the Queue has been identified will throw a
             java.lang.UnsupportedOperationException.</para>
            
             <para>During the execution of its send method, a message 
             must not be changed by other threads within the client. 
             If the message is modified, the result of the send is 
             undefined.</para>
             
             <para>After sending a message, a client may retain and modify it
             without affecting the message that has been sent. The same message
             object may be sent multiple times.</para>
             
             <para>The following message headers are set as part of sending a 
             message: JMSDestination, JMSDeliveryMode, 
             JMSExpiration, JMSPriority, 
             JMSMessageID and JMSTimeStamp.
             When the message is sent, the values of these headers are ignored. 
             After the completion of the send, the headers hold the values 
             specified by the method sending the message. It is possible for the 
             send method not to set JMSMessageID and 
             JMSTimeStamp if the 
             setting of these headers is explicitly disabled by the 
             MessageProducer.setDisableMessageID or
             MessageProducer.setDisableMessageTimestamp method.</para>
            
             <para>Creating a MessageProducer provides the same features as
             creating a QueueSender. A MessageProducer object is 
             recommended when creating new code. The  QueueSender is
             provided to support existing code.</para>
            
            
            
             <seealso cref="T:Kaazing.JMS.IMessageProducer"/>
             <seealso cref="M:Kaazing.JMS.ISession.CreateProducer(Kaazing.JMS.IDestination)"/>
             <seealso cref="M:Kaazing.JMS.IQueueSession.CreateSender(Kaazing.JMS.IQueue)"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.IQueueSender.Send(Kaazing.JMS.IMessage)">
             <summary>
             Sends a message to the queue. Uses the QueueSender's 
             default delivery mode, priority, and time to live.
             </summary>
            
             <param name="message">the message to send </param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to send the message 
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if an invalid message is specified.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if a client uses
                                     this method with a QueueSender with
                                     an invalid queue.</exception>
             
             <seealso cref="P:Kaazing.JMS.IMessageProducer.DeliveryMode"/>
             <seealso cref="P:Kaazing.JMS.IMessageProducer.TimeToLive"/>
             <seealso cref="P:Kaazing.JMS.IMessageProducer.Priority"/>
        </member>
        <member name="M:Kaazing.JMS.IQueueSender.Send(Kaazing.JMS.IMessage,System.Int32,System.Int32,System.Int64)">
             <summary>
             Sends a message to the queue, specifying delivery mode, priority, and 
             time to live.
             </summary>
            
             <param name="message">the message to send</param>
             <param name="deliveryMode">the delivery mode to use</param>
             <param name="priority">the priority for this message</param>
             <param name="timeToLive">the message's lifetime (in milliseconds)</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to send the message 
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if an invalid message is specified.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if a client uses
                                     this method with a QueueSender with
                                     an invalid queue.</exception>
        </member>
        <member name="M:Kaazing.JMS.IQueueSender.Send(Kaazing.JMS.IQueue,Kaazing.JMS.IMessage)">
             <summary>
             Sends a message to a queue for an unidentified message producer.
             Uses the QueueSender's default delivery mode, priority,
             and time to live.
            
             <para>Typically, a message producer is assigned a queue at creation 
             time; however, the JMS API also supports unidentified message producers,
             which require that the queue be supplied every time a message is
             sent.</para>
             </summary>
              
             <param name="queue">the queue to send this message to</param>
             <param name="message">the message to send</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to send the message 
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if an invalid message is specified.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if a client uses
                                     this method with an invalid queue.</exception>
             
             <seealso cref="P:Kaazing.JMS.IMessageProducer.DeliveryMode"/>
             <seealso cref="P:Kaazing.JMS.IMessageProducer.TimeToLive"/>
             <seealso cref="P:Kaazing.JMS.IMessageProducer.Priority"/>
        </member>
        <member name="M:Kaazing.JMS.IQueueSender.Send(Kaazing.JMS.IQueue,Kaazing.JMS.IMessage,System.Int32,System.Int32,System.Int64)">
            <summary>
            Sends a message to a queue for an unidentified message producer, 
            specifying delivery mode, priority and time to live.
             
            <para>Typically, a message producer is assigned a queue at creation 
            time; however, the JMS API also supports unidentified message producers,
            which require that the queue be supplied every time a message is
            sent.</para>
            </summary>
             
            <param name="queue">the queue to send this message to</param>
            <param name="message">the message to send</param>
            <param name="deliveryMode">the delivery mode to use</param>
            <param name="priority">the priority for this message</param>
            <param name="timeToLive">the message's lifetime (in milliseconds)</param>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to send the message 
                                    due to some internal error.</exception>
            <exception cref="T:Kaazing.JMS.MessageFormatException">if an invalid message is specified.</exception>
            <exception cref="T:Kaazing.JMS.InvalidDestinationException">if a client uses
                                    this method with an invalid queue.</exception>
        </member>
        <member name="P:Kaazing.JMS.IQueueSender.Queue">
            <summary>
            Gets the queue associated with this QueueSender.
            </summary>
             
            <returns>this sender's queue </returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the queue for
                                    this QueueSender
                                    due to some internal error.</exception>
        </member>
        <member name="T:Kaazing.JMS.IQueueSession">
             <summary>
             A QueueSession object provides methods for creating 
             QueueReceiver, QueueSender, 
             QueueBrowser, and TemporaryQueue objects.
            
             <para>If there are messages that have been received but not acknowledged 
             when a QueueSession terminates, these messages will be retained 
             and redelivered when a consumer next accesses the queue.</para>
            
            <para>A QueueSession is used for creating Point-to-Point specific
             objects. In general, use the Session object. 
             The QueueSession is used to support
             existing code. Using the Session object simplifies the 
             programming model, and allows transactions to be used across the two 
             messaging domains.</para>
             
             <para>A QueueSession cannot be used to create objects specific to the 
             publish/subscribe domain. The following methods inherit from 
             Session, but must throw an
             IllegalStateException 
             if they are used from QueueSession:
            <list type="bullet">
               <item>createDurableSubscriber</item>
               <item>createTemporaryTopic</item>
               <item>createTopic</item>
               <item>unsubscribe</item>
             </list></para>
            
            
             <seealso cref="T:Kaazing.JMS.ISession"/>
             <seealso cref="M:Kaazing.JMS.IQueueConnection.CreateQueueSession(System.Boolean,System.Int32)"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.IQueueSession.CreateQueue(System.String)">
             <summary>
             Creates a queue identity given a Queue name.
            
             <para>This facility is provided for the rare cases where clients need to
             dynamically manipulate queue identity. It allows the creation of a
             queue identity with a provider-specific name. Clients that depend 
             on this ability are not portable.</para>
            
             <para>Note that this method is not for creating the physical queue. 
             The physical creation of queues is an administrative task and is not
             to be initiated by the JMS API. The one exception is the
             creation of temporary queues, which is accomplished with the 
             createTemporaryQueue method.</para>
             </summary>
            
             <param name="queueName">the name of this Queue</param>
            
             <returns>a Queue with the given name</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a queue
                                     due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.IQueueSession.CreateReceiver(Kaazing.JMS.IQueue)">
             <summary>
             Creates a QueueReceiver object to receive messages from the
             specified queue.
             </summary>
            
             <param name="queue">the Queue to access</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a receiver
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid queue is specified.</exception>
        </member>
        <member name="M:Kaazing.JMS.IQueueSession.CreateReceiver(Kaazing.JMS.IQueue,System.String)">
             <summary>
             Creates a QueueReceiver object to receive messages from the 
             specified queue using a message selector.
             </summary>
              
             <param name="queue">the Queue to access</param>
             <param name="messageSelector">only messages with properties matching the
             message selector expression are delivered. A value of null or
             an empty string indicates that there is no message selector 
             for the message consumer.</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a receiver
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid queue is specified.</exception>
             <exception cref="T:Kaazing.JMS.InvalidSelectorException">if the message selector is invalid.</exception>
            
        </member>
        <member name="M:Kaazing.JMS.IQueueSession.CreateSender(Kaazing.JMS.IQueue)">
             <summary>
             Creates a QueueSender object to send messages to the 
             specified queue.
             </summary>
            
             <param name="queue">the Queue to access, or null if this is an 
             unidentified producer</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a sender
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid queue is specified.</exception>
        </member>
        <member name="M:Kaazing.JMS.IQueueSession.CreateBrowser(Kaazing.JMS.IQueue)">
             <summary>
             Creates a QueueBrowser object to peek at the messages on 
             the specified queue.
             </summary>
            
             <param name="queue">the Queue to access</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a browser
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid queue is specified.</exception>
        </member>
        <member name="M:Kaazing.JMS.IQueueSession.CreateBrowser(Kaazing.JMS.IQueue,System.String)">
            <summary>
            Creates a QueueBrowser object to peek at the messages on 
            the specified queue using a message selector.
            </summary>
             
            <param name="queue">the Queue to access</param>
            <param name="messageSelector">only messages with properties matching the
            message selector expression are delivered. A value of null or
            an empty string indicates that there is no message selector 
            for the message consumer.</param>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a browser
                                    due to some internal error.</exception>
            <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid queue is specified.</exception>
            <exception cref="T:Kaazing.JMS.InvalidSelectorException">if the message selector is invalid.</exception>
        </member>
        <member name="M:Kaazing.JMS.IQueueSession.CreateTemporaryQueue">
             <summary>
             Creates a TemporaryQueue object. Its lifetime will be that 
             of the QueueConnection unless it is deleted earlier.
             </summary>
            
             <returns>a temporary queue identity</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a temporary queue
                                     due to some internal error.</exception>
        </member>
        <member name="T:Kaazing.JMS.IServerSession">
             <summary>
             A ServerSession object is an application server object that 
             is used by a server to associate a thread with a JMS session (optional).
            
             <para>A ServerSession implements two methods:
            
             <list type="bullet">
               <item>getSession - returns the ServerSession's 
                   JMS session.</item>
               <item>start - starts the execution of the 
                   ServerSession 
                   thread and results in the execution of the JMS session's 
                   run method.</item>
             </list></para>
            
             <para>A ConnectionConsumer implemented by a JMS provider uses a 
             ServerSession to process one or more messages that have 
             arrived. It does this by getting a ServerSession from the 
             ConnectionConsumer's ServerSessionPool; getting 
             the ServerSession's JMS session; loading it with the messages; 
             and then starting the ServerSession.</para>
            
             <para>In most cases the ServerSession will register some object 
             it provides as the ServerSession's thread run object. The 
             ServerSession's start method will call the 
             thread's start method, which will start the new thread, and 
             from it, call the run method of the 
             ServerSession's run object. This object will do some 
             housekeeping and then call the Session's run 
             method. When run returns, the ServerSession's run 
             object can return the ServerSession to the 
             ServerSessionPool, and the cycle starts again.</para>
            
             <para>Note that the JMS API does not architect how the 
             ConnectionConsumer loads the Session with 
             messages. Since both the ConnectionConsumer and 
             Session are implemented by the same JMS provider, they can 
             accomplish the load using a private mechanism.</para>
            
            
             <seealso cref="T:Kaazing.JMS.IServerSessionPool"/>
             <seealso cref="T:Kaazing.JMS.IConnectionConsumer"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.IServerSession.Start">
            <summary>
            Cause the Session's run method to be called 
            to process messages that were just assigned to it.
             
            </summary>
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to start the server
                                    session to process messages due to some internal
                                    error.</exception>
        </member>
        <member name="P:Kaazing.JMS.IServerSession.Session">
             <summary>
             Return the ServerSession's Session. This must 
             be a Session created by the same Connection 
             that will be dispatching messages to it. The provider will assign one or
             more messages to the Session 
             and then call start on the ServerSession.
             </summary>
            
             <returns>the server session's session</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the associated
                                     session for this ServerSession due
                                     to some internal error.</exception>
        </member>
        <member name="T:Kaazing.JMS.IServerSessionPool">
             <summary>
             A ServerSessionPool object is an object implemented by an 
             application server to provide a pool of ServerSession objects 
             for processing the messages of a ConnectionConsumer (optional).
            
             <para>Its only method is getServerSession. The JMS API does not 
             architect how the pool is implemented. It could be a static pool of 
             ServerSession objects, or it could use a sophisticated 
             algorithm to dynamically create ServerSession objects as 
             needed.</para>
            
             <para>If the ServerSessionPool is out of 
             ServerSession objects, the getServerSession call 
             may block. If a ConnectionConsumer is blocked, it cannot 
             deliver new messages until a ServerSession is 
             eventually returned.</para>
            
            
             <seealso cref="T:Kaazing.JMS.IServerSession"/>
             </summary>
        </member>
        <member name="P:Kaazing.JMS.IServerSessionPool.ServerSession">
             <summary>
             Return a server session from the pool.
             </summary>
            
             <returns>a server session from the pool</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if an application server fails to
                                     return a ServerSession out of its
                                     server session pool.</exception>
        </member>
        <member name="T:Kaazing.JMS.ITopicConnection">
             <summary>
             A TopicConnection object is an active connection to a 
             publish/subscribe JMS provider. A client uses a TopicConnection 
             object to create one or more TopicSession objects
             for producing and consuming messages.
            
            <para>A TopicConnection can be used to create a 
            TopicSession, from which
             specialized topic-related objects can be created. 
             A more general, and recommended approach is to use the 
             Connection object. </para>
            
            
             <para>The TopicConnection object
             should be used to support existing code.</para>
            
            
             <seealso cref="T:Kaazing.JMS.IConnection"/>
             <seealso cref="T:Kaazing.JMS.IConnectionFactory"/>
             <seealso cref="T:Kaazing.JMS.ITopicConnectionFactory"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.ITopicConnection.CreateTopicSession(System.Boolean,System.Int32)">
             <summary>
             Creates a TopicSession object.
             </summary>
            
             <param name="transacted">indicates whether the session is transacted</param>
             <param name="acknowledgeMode">indicates whether the consumer or the
             client will acknowledge any messages it receives; ignored if the session
             is transacted. Legal values are Session.AUTO_ACKNOWLEDGE, 
             Session.CLIENT_ACKNOWLEDGE, and 
             Session.DUPS_OK_ACKNOWLEDGE. </param>
              
             <returns>a newly created topic session</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the TopicConnection object fails
                                     to create a session due to some internal error or
                                     lack of support for the specific transaction
                                     and acknowledgement mode.</exception>
            
             <seealso cref="F:Kaazing.JMS.SessionConstants.AUTO_ACKNOWLEDGE"/>
             <seealso cref="F:Kaazing.JMS.SessionConstants.CLIENT_ACKNOWLEDGE"/>
             <seealso cref="F:Kaazing.JMS.SessionConstants.DUPS_OK_ACKNOWLEDGE"/>
        </member>
        <member name="M:Kaazing.JMS.ITopicConnection.CreateConnectionConsumer(Kaazing.JMS.ITopic,System.String,Kaazing.JMS.IServerSessionPool,System.Int32)">
             <summary>
             Creates a connection consumer for this connection (optional operation).
             This is an expert facility not used by regular JMS clients.
             </summary>
              
             <param name="topic">the topic to access</param>
             <param name="messageSelector">only messages with properties matching the
             message selector expression are delivered.  A value of null or
             an empty string indicates that there is no message selector  
             for the message consumer.</param>
             <param name="sessionPool">the server session pool to associate with this 
             connection consumer</param>
             <param name="maxMessages">the maximum number of messages that can be
             assigned to a server session at one time</param>
            
             <returns>the connection consumer</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the TopicConnection object fails
                                     to create a connection consumer due to some
                                     internal error or invalid arguments for 
                                     sessionPool and 
                                     messageSelector.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid topic is specified.</exception>
             <exception cref="T:Kaazing.JMS.InvalidSelectorException">if the message selector is invalid.</exception>
             <seealso cref="T:Kaazing.JMS.IConnectionConsumer"/>
        </member>
        <member name="M:Kaazing.JMS.ITopicConnection.CreateDurableConnectionConsumer(Kaazing.JMS.ITopic,System.String,System.String,Kaazing.JMS.IServerSessionPool,System.Int32)">
             <summary>
             Create a durable connection consumer for this connection (optional operation). 
             This is an expert facility not used by regular JMS clients.
             </summary>
                            
             <param name="topic">the topic to access</param>
             <param name="subscriptionName">durable subscription name</param>
             <param name="messageSelector">only messages with properties matching the
             message selector expression are delivered.  A value of null or
             an empty string indicates that there is no message selector 
             for the message consumer.</param>
             <param name="sessionPool">the server session pool to associate with this 
             durable connection consumer</param>
             <param name="maxMessages">the maximum number of messages that can be
             assigned to a server session at one time</param>
            
             <returns>the durable connection consumer</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the TopicConnection object fails
                                     to create a connection consumer due to some
                                     internal error or invalid arguments for 
                                     sessionPool and 
                                     messageSelector.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid topic is specified.</exception>
             <exception cref="T:Kaazing.JMS.InvalidSelectorException">if the message selector is invalid.</exception>
             <seealso cref="T:Kaazing.JMS.IConnectionConsumer"/>
        </member>
        <member name="T:Kaazing.JMS.ITopicConnectionFactory">
             <summary>
             A client uses a TopicConnectionFactory object to create 
             TopicConnection objects with a publish/subscribe JMS provider.
            
             <para>A TopicConnectionFactory can be used to create a 
             TopicConnection, from which specialized topic-related objects
             can be  created. A more general, and recommended approach 
             is to use the ConnectionFactory object.</para>
              
             <para> The TopicConnectionFactory object
             should be used to support existing code.</para>
            
            
             <seealso cref="T:Kaazing.JMS.IConnectionFactory"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.ITopicConnectionFactory.CreateTopicConnection">
             <summary>
             Creates a topic connection with the default user identity.
             The connection is created in stopped mode. No messages 
             will be delivered until the Connection.start method
             is explicitly called.
             </summary>
            
             <returns>a newly created topic connection</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to create a topic 
                                     connection due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.JMSSecurityException">if client authentication fails due to 
                                             an invalid user name or password.</exception>
        </member>
        <member name="M:Kaazing.JMS.ITopicConnectionFactory.CreateTopicConnection(System.String,System.String)">
             <summary>
             Creates a topic connection with the specified user identity.
             The connection is created in stopped mode. No messages 
             will be delivered until the Connection.start method
             is explicitly called.
             </summary>
              
             <param name="userName">the caller's user name</param>
             <param name="password">the caller's password</param>
              
             <returns>a newly created topic connection</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to create a topic 
                                     connection due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.JMSSecurityException">if client authentication fails due to 
                                             an invalid user name or password.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Kaazing.JMS.ITopicPublisher" -->
        <member name="M:Kaazing.JMS.ITopicPublisher.Publish(Kaazing.JMS.IMessage)">
             <summary>
             Publishes a message to the topic.
             Uses the TopicPublisher's default delivery mode, priority,
             and time to live.
             </summary>
            
             <param name="message">the message to publish</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to publish the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if an invalid message is specified.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if a client uses this method
                                     with a TopicPublisher with
                                     an invalid topic.</exception>
             
             <seealso cref="P:Kaazing.JMS.IMessageProducer.DeliveryMode"/>
             <seealso cref="P:Kaazing.JMS.IMessageProducer.TimeToLive"/>
             <seealso cref="P:Kaazing.JMS.IMessageProducer.Priority"/>
        </member>
        <member name="M:Kaazing.JMS.ITopicPublisher.Publish(Kaazing.JMS.IMessage,System.Int32,System.Int32,System.Int64)">
             <summary>
             Publishes a message to the topic, specifying delivery mode,
             priority, and time to live.
             </summary>
            
             <param name="message">the message to publish</param>
             <param name="deliveryMode">the delivery mode to use</param>
             <param name="priority">the priority for this message</param>
             <param name="timeToLive">the message's lifetime (in milliseconds)</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to publish the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if an invalid message is specified.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if a client uses this method
                                     with a TopicPublisher with
                                     an invalid topic.</exception>
        </member>
        <member name="M:Kaazing.JMS.ITopicPublisher.Publish(Kaazing.JMS.ITopic,Kaazing.JMS.IMessage)">
             <summary>
             Publishes a message to a topic for an unidentified message producer. 
             Uses the TopicPublisher's default delivery mode, 
             priority, and time to live.
              
             <para>Typically, a message producer is assigned a topic at creation 
             time; however, the JMS API also supports unidentified message producers,
             which require that the topic be supplied every time a message is
             published.</para>
             </summary>
            
             <param name="topic">the topic to publish this message to</param>
             <param name="message">the message to publish</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to publish the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if an invalid message is specified.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if a client uses
                                     this method with an invalid topic.</exception>
             
             <seealso cref="P:Kaazing.JMS.IMessageProducer.DeliveryMode"/>
             <seealso cref="P:Kaazing.JMS.IMessageProducer.TimeToLive"/>
             <seealso cref="P:Kaazing.JMS.IMessageProducer.Priority"/>
        </member>
        <member name="M:Kaazing.JMS.ITopicPublisher.Publish(Kaazing.JMS.ITopic,Kaazing.JMS.IMessage,System.Int32,System.Int32,System.Int64)">
             <summary>
             Publishes a message to a topic for an unidentified message 
             producer, specifying delivery mode, priority and time to live.
              
             <para>Typically, a message producer is assigned a topic at creation
             time; however, the JMS API also supports unidentified message producers,
             which require that the topic be supplied every time a message is
             published.</para>
             </summary>
            
             <param name="topic">the topic to publish this message to</param>
             <param name="message">the message to publish</param>
             <param name="deliveryMode">the delivery mode to use</param>
             <param name="priority">the priority for this message</param>
             <param name="timeToLive">the message's lifetime (in milliseconds)</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to publish the message
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.MessageFormatException">if an invalid message is specified.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if a client uses
                                     this method with an invalid topic.</exception>
        </member>
        <member name="P:Kaazing.JMS.ITopicPublisher.Topic">
             <summary>
             Gets the topic associated with this TopicPublisher.
             </summary>
            
             <returns>this publisher's topic</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to get the topic for
                                     this TopicPublisher
                                     due to some internal error.</exception>
        </member>
        <member name="T:Kaazing.JMS.ITopicSession">
             <summary>
             A TopicSession object provides methods for creating 
             TopicPublisher, TopicSubscriber, and 
             TemporaryTopic objects. It also provides a method for 
             deleting its client's durable subscribers.
            
            <para>A TopicSession is used for creating Pub/Sub specific
             objects. In general, use the  Session object, and 
              use TopicSession  only to support
             existing code. Using the Session object simplifies the 
             programming model, and allows transactions to be used across the two 
             messaging domains.</para>
             
             <para>A TopicSession cannot be used to create objects specific to the 
             point-to-point domain. The following methods inherit from 
             Session, but must throw an 
             IllegalStateException 
             if used from TopicSession:
            <list type="bullet">
               <item>createBrowser</item>
               <item>createQueue</item>
               <item>createTemporaryQueue</item>
            </list></para>
            
            
             <seealso cref="T:Kaazing.JMS.ISession"/>
             <seealso cref="M:Kaazing.JMS.IConnection.CreateSession(System.Boolean,System.Int32)"/>
             <seealso cref="M:Kaazing.JMS.ITopicConnection.CreateTopicSession(System.Boolean,System.Int32)"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.ITopicSession.CreateTopic(System.String)">
             <summary>
             Creates a topic identity given a Topic name.
            
             <para>This facility is provided for the rare cases where clients need to
             dynamically manipulate topic identity. This allows the creation of a
             topic identity with a provider-specific name. Clients that depend 
             on this ability are not portable.</para>
            
             <para>Note that this method is not for creating the physical topic. 
             The physical creation of topics is an administrative task and is not
             to be initiated by the JMS API. The one exception is the
             creation of temporary topics, which is accomplished with the 
             createTemporaryTopic method.</para>
             </summary>
              
             <param name="topicName">the name of this Topic</param>
            
             <returns>a Topic with the given name</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a topic
                                     due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.ITopicSession.CreateSubscriber(Kaazing.JMS.ITopic)">
             <summary>
             Creates a nondurable subscriber to the specified topic.
              
             <para>A client uses a TopicSubscriber object to receive 
             messages that have been published to a topic.</para>
            
             <para>Regular TopicSubscriber objects are not durable. 
             They receive only messages that are published while they are active.</para>
            
             <para>In some cases, a connection may both publish and subscribe to a 
             topic. The subscriber NoLocal attribute allows a subscriber
             to inhibit the delivery of messages published by its own connection.
             The default value for this attribute is false.</para>
             </summary>
            
             <param name="topic">the Topic to subscribe to</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a subscriber
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid topic is specified.</exception>
        </member>
        <member name="M:Kaazing.JMS.ITopicSession.CreateSubscriber(Kaazing.JMS.ITopic,System.String,System.Boolean)">
             <summary>
             Creates a nondurable subscriber to the specified topic, using a
             message selector or specifying whether messages published by its
             own connection should be delivered to it.
            
             <para>A client uses a TopicSubscriber object to receive 
             messages that have been published to a topic.</para>
              
             <para>Regular TopicSubscriber objects are not durable. 
             They receive only messages that are published while they are active.</para>
            
             <para>Messages filtered out by a subscriber's message selector will 
             never be delivered to the subscriber. From the subscriber's 
             perspective, they do not exist.</para>
            
             <para>In some cases, a connection may both publish and subscribe to a 
             topic. The subscriber NoLocal attribute allows a subscriber
             to inhibit the delivery of messages published by its own connection.
             The default value for this attribute is false.</para>
             </summary>
            
             <param name="topic">the Topic to subscribe to</param>
             <param name="messageSelector">only messages with properties matching the
             message selector expression are delivered. A value of null or
             an empty string indicates that there is no message selector 
             for the message consumer.</param>
             <param name="noLocal">if set, inhibits the delivery of messages published
             by its own connection</param>
             
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a subscriber
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid topic is specified.</exception>
             <exception cref="T:Kaazing.JMS.InvalidSelectorException">if the message selector is invalid.</exception>
        </member>
        <member name="M:Kaazing.JMS.ITopicSession.CreateDurableSubscriber(Kaazing.JMS.ITopic,System.String)">
             <summary>
             Creates a durable subscriber to the specified topic.
              
             <para>If a client needs to receive all the messages published on a 
             topic, including the ones published while the subscriber is inactive,
             it uses a durable TopicSubscriber. The JMS provider
             retains a record of this 
             durable subscription and insures that all messages from the topic's 
             publishers are retained until they are acknowledged by this 
             durable subscriber or they have expired.</para>
            
             <para>Sessions with durable subscribers must always provide the same 
             client identifier. In addition, each client must specify a name that 
             uniquely identifies (within client identifier) each durable 
             subscription it creates. Only one session at a time can have a 
             TopicSubscriber for a particular durable subscription.</para>
            
             <para>A client can change an existing durable subscription by creating 
             a durable TopicSubscriber with the same name and a new 
             topic and/or 
             message selector. Changing a durable subscriber is equivalent to 
             unsubscribing (deleting) the old one and creating a new one.</para>
            
             <para>In some cases, a connection may both publish and subscribe to a 
             topic. The subscriber NoLocal attribute allows a subscriber
             to inhibit the delivery of messages published by its own connection.
             The default value for this attribute is false.</para>
             </summary>
            
             <param name="topic">the non-temporary Topic to subscribe to</param>
             <param name="name">the name used to identify this subscription</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a subscriber
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid topic is specified.</exception>
        </member>
        <member name="M:Kaazing.JMS.ITopicSession.CreateDurableSubscriber(Kaazing.JMS.ITopic,System.String,System.String,System.Boolean)">
             <summary>
             Creates a durable subscriber to the specified topic, using a
             message selector or specifying whether messages published by its
             own connection should be delivered to it.
              
             <para>If a client needs to receive all the messages published on a 
             topic, including the ones published while the subscriber is inactive,
             it uses a durable TopicSubscriber. The JMS provider
             retains a record of this 
             durable subscription and insures that all messages from the topic's 
             publishers are retained until they are acknowledged by this 
             durable subscriber or they have expired.</para>
            
             <para>Sessions with durable subscribers must always provide the same
             client identifier. In addition, each client must specify a name which
             uniquely identifies (within client identifier) each durable
             subscription it creates. Only one session at a time can have a
             TopicSubscriber for a particular durable subscription.
             An inactive durable subscriber is one that exists but
             does not currently have a message consumer associated with it.</para>
            
             <para>A client can change an existing durable subscription by creating 
             a durable TopicSubscriber with the same name and a new 
             topic and/or 
             message selector. Changing a durable subscriber is equivalent to 
             unsubscribing (deleting) the old one and creating a new one.</para>
             </summary>
            
             <param name="topic">the non-temporary Topic to subscribe to</param>
             <param name="name">the name used to identify this subscription</param>
             <param name="messageSelector">only messages with properties matching the
             message selector expression are delivered.  A value of null or
             an empty string indicates that there is no message selector 
             for the message consumer.</param>
             <param name="noLocal">if set, inhibits the delivery of messages published
             by its own connection</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a subscriber
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid topic is specified.</exception>
             <exception cref="T:Kaazing.JMS.InvalidSelectorException">if the message selector is invalid.</exception>
        </member>
        <member name="M:Kaazing.JMS.ITopicSession.CreatePublisher(Kaazing.JMS.ITopic)">
             <summary>
             Creates a publisher for the specified topic.
            
             <para>A client uses a TopicPublisher object to publish 
             messages on a topic.
             Each time a client creates a TopicPublisher on a topic, it
             defines a 
             new sequence of messages that have no ordering relationship with the 
             messages it has previously sent.</para>
             </summary>
            
             <param name="topic">the Topic to publish to, or null if this is an
             unidentified producer</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a publisher
                                     due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid topic is specified.</exception>
        </member>
        <member name="M:Kaazing.JMS.ITopicSession.CreateTemporaryTopic">
             <summary>
             Creates a TemporaryTopic object. Its lifetime will be that 
             of the TopicConnection unless it is deleted earlier.
             </summary>
            
             <returns>a temporary topic identity</returns>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to create a temporary
                                     topic due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.ITopicSession.Unsubscribe(System.String)">
             <summary>
             Unsubscribes a durable subscription that has been created by a client.
              
             <para>This method deletes the state being maintained on behalf of the 
             subscriber by its provider.</para>A
            
             <para>It is erroneous for a client to delete a durable subscription
             while there is an active TopicSubscriber for the 
             subscription, or while a consumed message is part of a pending 
             transaction or has not been acknowledged in the session.</para>
             </summary>
            
             <param name="name">the name used to identify this subscription</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the session fails to unsubscribe to the 
                                     durable subscription due to some internal error.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid subscription name
                                                    is specified.</exception>
        </member>
        <member name="T:Kaazing.JMS.JMSSecurityException">
             <summary>
            
             <para> This exception must be thrown when a provider rejects a user 
                 name/password submitted by a client. It may also be thrown for any case 
                 where a security restriction prevents a method from completing.</para>
            
             </summary>
        </member>
        <member name="M:Kaazing.JMS.JMSSecurityException.#ctor(System.String,System.String)">
             <summary>
             Constructs a JMSSecurityException with the specified 
              reason and error code.
             </summary>
            
              <param name="reason">a description of the exception</param>
              <param name="errorCode">a string specifying the vendor-specific
                                    error code</param>
                                    
        </member>
        <member name="M:Kaazing.JMS.JMSSecurityException.#ctor(System.String)">
             <summary>
             Constructs a JMSSecurityException with the specified 
              reason. The error code defaults to null.
             </summary>
            
              <param name="reason">a description of the exception</param>
        </member>
        <member name="T:Kaazing.JMS.MessageConstants">
            <summary>
            Class the contains the contants of the Java/JMS Message interface.
            </summary>
        </member>
        <member name="F:Kaazing.JMS.MessageConstants.DEFAULT_DELIVERY_MODE">
            <summary>
            The message producer's default delivery mode is PERSISTENT.
            </summary>
        </member>
        <member name="F:Kaazing.JMS.MessageConstants.DEFAULT_PRIORITY">
            <summary>
            The message producer's default priority is 4. 
            </summary>
        </member>
        <member name="F:Kaazing.JMS.MessageConstants.DEFAULT_TIME_TO_LIVE">
            <summary>
            The message producer's default time to live is unlimited; the message 
             never expires. 
            </summary>
        </member>
        <member name="T:Kaazing.JMS.MessageEOFException">
             <summary>
            
             <para> This exception must be thrown when an unexpected 
                 end of stream has been reached when a IStreamMessage or 
                 IBytesMessage is being read.</para>
            
             </summary>
        </member>
        <member name="M:Kaazing.JMS.MessageEOFException.#ctor(System.String,System.String)">
             <summary>
             Constructs a MessageEOFException with the specified 
              reason and error code.
             </summary>
            
              <param name="reason">a description of the exception</param>
              <param name="errorCode">a string specifying the vendor-specific
                                    error code</param>
                                    
        </member>
        <member name="M:Kaazing.JMS.MessageEOFException.#ctor(System.String)">
             <summary>
             Constructs a MessageEOFException with the specified 
              reason. The error code defaults to null.
             </summary>
            
              <param name="reason">a description of the exception</param>
        </member>
        <member name="T:Kaazing.JMS.MessageFormatException">
             <summary>
            
             <para> This exception must be thrown when a JMS client 
                 attempts to use a data type not supported by a message or attempts to 
                 read data in a message as the wrong type. It must also be thrown when 
                 equivalent type errors are made with message property values. For 
                 example, this exception must be thrown if 
                 IStreamMessage.WriteObject is given an unsupported class or 
                 if IStreamMessage.ReadShort is used to read a 
                 bool value. Note that the special case of a failure 
                 caused by an attempt to read improperly formatted String 
                 data as numeric values must throw the 
                 NumberFormatException.</para>
            
             </summary>
        </member>
        <member name="M:Kaazing.JMS.MessageFormatException.#ctor(System.String,System.String)">
             <summary>
             Constructs a MessageFormatException with the specified 
              reason and error code.
             </summary>
            
              <param name="reason">a description of the exception</param>
              <param name="errorCode">a string specifying the vendor-specific
                                    error code</param>
                                    
        </member>
        <member name="M:Kaazing.JMS.MessageFormatException.#ctor(System.String)">
             <summary>
             Constructs a MessageFormatException with the specified 
              reason. The error code defaults to null.
             </summary>
            
              <param name="reason">a description of the exception</param>
        </member>
        <member name="T:Kaazing.JMS.MessageNotReadableException">
             <summary>
            
             <para> This exception must be thrown when a JMS client attempts to read a 
                 write-only message.</para>
            
             </summary>
        </member>
        <member name="M:Kaazing.JMS.MessageNotReadableException.#ctor(System.String,System.String)">
             <summary>
             Constructs a MessageNotReadableException with the specified 
              reason and error code.
             </summary>
            
              <param name="reason">a description of the exception</param>
              <param name="errorCode">a string specifying the vendor-specific
                                    error code</param>
                                    
        </member>
        <member name="M:Kaazing.JMS.MessageNotReadableException.#ctor(System.String)">
             <summary>
             Constructs a MessageNotReadableException with the specified 
              reason. The error code defaults to null.
             </summary>
            
              <param name="reason">a description of the exception</param>
        </member>
        <member name="T:Kaazing.JMS.MessageNotWriteableException">
             <summary>
            
             <para> This exception must be thrown when a JMS client attempts to write to a 
                 read-only message.</para>
            
             </summary>
        </member>
        <member name="M:Kaazing.JMS.MessageNotWriteableException.#ctor(System.String,System.String)">
             <summary>
             Constructs a MessageNotWriteableException with the specified 
              reason and error code.
             </summary>
            
              <param name="reason">a description of the exception</param>
              <param name="errorCode">a string specifying the vendor-specific
                                    error code</param>
                                    
        </member>
        <member name="M:Kaazing.JMS.MessageNotWriteableException.#ctor(System.String)">
             <summary>
             Constructs a MessageNotWriteableException with the specified 
              reason. The error code defaults to null.
            
             </summary>
              <param name="reason">a description of the exception</param>
        </member>
        <member name="T:Kaazing.JMS.QueueRequestor">
             <summary>
             The QueueRequestor helper class simplifies
             making service requests.
            
             <para>The QueueRequestor constructor is given a non-transacted 
             IQueueSession and a destination IQueue. It creates a
             ITemporaryQueue for the responses and provides a 
             request method that sends the request message and waits 
             for its reply.</para>
            
             <para>This is a basic request/reply abstraction that should be sufficient 
             for most uses. JMS providers and clients are free to create more 
             sophisticated versions.</para>
            
            
             <seealso cref="T:Kaazing.JMS.TopicRequestor"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.QueueRequestor.#ctor(Kaazing.JMS.IQueueSession,Kaazing.JMS.IQueue)">
             <summary>
             Constructor for the QueueRequestor class.
              
             <para>This implementation assumes the session parameter to be non-transacted,
             with a delivery mode of either AUTO_ACKNOWLEDGE or 
             DUPS_OK_ACKNOWLEDGE.</para>
            
             </summary>
             <param name="session">the IQueueSession the queue belongs to</param>
             <param name="queue">the queue to perform the request/reply call on</param>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to create the
                                     QueueRequestor due to some internal
                                     error.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid queue is specified.</exception>
        </member>
        <member name="M:Kaazing.JMS.QueueRequestor.Request(Kaazing.JMS.IMessage)">
            <summary>
            Sends a request and waits for a reply. The temporary queue is used for
            the JMSReplyTo destination, and only one reply per request 
            is expected.
            </summary>
             
            <param name="message">the message to send</param>
             
            <returns>the reply message</returns>
             
            <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to complete the
                                    request due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.QueueRequestor.Close">
             <summary>
             Closes the QueueRequestor and its session.
            
             <para>Since a provider may allocate some resources on behalf of a 
             QueueRequestor, clients 
             should close them when they 
             are not needed. Relying on garbage collection to eventually reclaim 
             these resources may not be timely enough.</para>
              
             <para>Note that this method closes the IQueueSession object 
             passed to the QueueRequestor constructor.</para>
            
             </summary>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to close the
                                     QueueRequestor due to some internal
                                     error.</exception>
        </member>
        <member name="T:Kaazing.JMS.ResourceAllocationException">
             <summary>
            
             <para>This exception is thrown when a provider is unable to allocate the 
                resources required by a method. For example, this exception should be 
                thrown when a call to 
                ITopicConnectionFactory.CreateTopicConnection fails due to a
                lack of JMS provider resources.</para>
            
             </summary>
        </member>
        <member name="M:Kaazing.JMS.ResourceAllocationException.#ctor(System.String,System.String)">
             <summary>
             Constructs a ResourceAllocationException with the specified 
              reason and error code.
             </summary>
            
              <param name="reason">a description of the exception</param>
              <param name="errorCode">a string specifying the vendor-specific
                                    error code</param>
                                    
        </member>
        <member name="M:Kaazing.JMS.ResourceAllocationException.#ctor(System.String)">
             <summary>
             Constructs a ResourceAllocationException with the specified 
              reason. The error code defaults to null.
             </summary>
            
              <param name="reason">a description of the exception</param>
        </member>
        <member name="T:Kaazing.JMS.SessionConstants">
            <summary>
            Class the contains the contants of the Java/JMS Session interface.
            </summary>
        </member>
        <member name="F:Kaazing.JMS.SessionConstants.AUTO_ACKNOWLEDGE">
            <summary>
            With this acknowledgment mode, the session automatically acknowledges
            a client's receipt of a message either when the session has successfully 
            returned from a call to receive or when the message 
            listener the session has called to process the message successfully 
            returns.
            </summary> 
        </member>
        <member name="F:Kaazing.JMS.SessionConstants.CLIENT_ACKNOWLEDGE">
             <summary>
             With this acknowledgment mode, the client acknowledges a consumed 
             message by calling the message's acknowledge method. 
             Acknowledging a consumed message acknowledges all messages that the 
             session has consumed.
            
             <para>When client acknowledgment mode is used, a client may build up a 
             large number of unacknowledged messages while attempting to process 
             them. A JMS provider should provide administrators with a way to 
             limit client overrun so that clients are not driven to resource 
             exhaustion and ensuing failure when some resource they are using 
             is temporarily blocked.</para>
            
             <seealso cref="M:Kaazing.JMS.IMessage.Acknowledge"/>
             </summary> 
        </member>
        <member name="F:Kaazing.JMS.SessionConstants.DUPS_OK_ACKNOWLEDGE">
            <summary>
            This acknowledgment mode instructs the session to lazily acknowledge 
            the delivery of messages. This is likely to result in the delivery of 
            some duplicate messages if the JMS provider fails, so it should only be 
            used by consumers that can tolerate duplicate messages. Use of this  
            mode can reduce session overhead by minimizing the work the 
            session does to prevent duplicates.
            </summary>
        </member>
        <member name="F:Kaazing.JMS.SessionConstants.SESSION_TRANSACTED">
            <summary>
            This value is returned from the method 
            getAcknowledgeMode if the session is transacted.
            If a Session is transacted, the acknowledgement mode
            is ignored.
            </summary>
        </member>
        <member name="T:Kaazing.JMS.TopicRequestor">
             <summary>
             The TopicRequestor helper class simplifies
             making service requests.
            
             <para>The TopicRequestor constructor is given a non-transacted 
             ITopicSession and a destination ITopic. It creates a 
             ITemporaryTopic for the responses and provides a 
             request method that sends the request message and waits 
             for its reply.</para>
            
             <para>This is a basic request/reply abstraction that should be sufficient 
             for most uses. JMS providers and clients are free to create more 
             sophisticated versions.</para>
            
            
             <seealso cref="T:Kaazing.JMS.QueueRequestor"/>
             </summary>
        </member>
        <member name="M:Kaazing.JMS.TopicRequestor.#ctor(Kaazing.JMS.ITopicSession,Kaazing.JMS.ITopic)">
             <summary>
             Constructor for the TopicRequestor class.
             
             <para>This implementation assumes the session parameter to be non-transacted,
             with a delivery mode of either AUTO_ACKNOWLEDGE or 
             DUPS_OK_ACKNOWLEDGE.</para>
             </summary>
            
             <param name="session">the ITopicSession the topic belongs to</param>
             <param name="topic">the topic to perform the request/reply call on</param>
            
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to create the
                                     TopicRequestor due to some internal
                                     error.</exception>
             <exception cref="T:Kaazing.JMS.InvalidDestinationException">if an invalid topic is specified.</exception>
        </member>
        <member name="M:Kaazing.JMS.TopicRequestor.Request(Kaazing.JMS.IMessage)">
             <summary>
             Sends a request and waits for a reply. The temporary topic is used for
             the JMSReplyTo destination; the first reply is returned, 
             and any following replies are discarded.
             </summary>
            
             <param name="message">the message to send</param>
              
             <returns>the reply message</returns>
              
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to complete the
                                     request due to some internal error.</exception>
        </member>
        <member name="M:Kaazing.JMS.TopicRequestor.Close">
             <summary>
             Closes the TopicRequestor and its session.
            
             <para>Since a provider may allocate some resources on behalf of a 
             TopicRequestor, clients 
             should close them when they 
             are not needed. Relying on garbage collection to eventually reclaim 
             these resources may not be timely enough.</para>
            
             <para>Note that this method closes the ITopicSession object 
             passed to the TopicRequestor constructor.</para>
              
             </summary>
             <exception cref="T:Kaazing.JMS.JMSException">if the JMS provider fails to close the
                                     TopicRequestor due to some internal
                                     error.</exception>
        </member>
        <member name="T:Kaazing.JMS.TransactionInProgressException">
             <summary>
            
             <para> This exception is thrown when an 
                 operation is invalid because a transaction is in progress. 
                 For instance, an attempt to call ISession.Commit when a 
                 session is part of a distributed transaction should throw a 
                 TransactionInProgressException.</para>
            
             </summary>
        </member>
        <member name="M:Kaazing.JMS.TransactionInProgressException.#ctor(System.String,System.String)">
             <summary>
             Constructs a TransactionInProgressException with the 
              specified reason and error code.
             </summary>
            
              <param name="reason">a description of the exception</param>
              <param name="errorCode">a string specifying the vendor-specific
                                    error code</param>
                                    
        </member>
        <member name="M:Kaazing.JMS.TransactionInProgressException.#ctor(System.String)">
             <summary>
             Constructs a TransactionInProgressException with the 
              specified reason. The error code defaults to null.
             </summary>
            
              <param name="reason">a description of the exception</param>
        </member>
        <member name="T:Kaazing.JMS.TransactionRolledBackException">
             <summary>
            
             <para> This exception must be thrown when a 
                 call to <c>ISession.Commit()</c> results in a rollback of the current 
                 transaction.</para>
            
             </summary>
        </member>
        <member name="M:Kaazing.JMS.TransactionRolledBackException.#ctor(System.String,System.String)">
             <summary>
             Constructs a TransactionRolledBackException with the 
              specified reason and error code.
             </summary>
            
              <param name="reason">a description of the exception</param>
              <param name="errorCode">a string specifying the vendor-specific
                                    error code</param>
                                    
        </member>
        <member name="M:Kaazing.JMS.TransactionRolledBackException.#ctor(System.String)">
             <summary>
             Constructs a TransactionRolledBackException with the 
              specified reason. The error code defaults to null.
             </summary>
            
              <param name="reason">a description of the exception</param>
        </member>
    </members>
</doc>
